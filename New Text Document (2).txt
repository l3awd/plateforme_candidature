Cahier des charges
I.	Page de garde
Nom projet : Plateforme de gestion des candidatures aux concours  
Nom de code du projet : CandidaturePlus
II.	P√©rim√®tre du projet
1.	But
Le but de ce projet est de d√©velopper une plateforme en ligne pour d√©mat√©rialiser le processus de candidature aux concours organis√©s dans diff√©rents centres. 
La plateforme doit simplifier et moderniser le processus pour les candidats et l'administration en int√©grant les fonctionnalit√©s suivantes :  
-	Gestion des candidatures.  
-	Gestion des utilisateurs et des r√¥les.  
-	Notifications automatiques.  
-	Suivi et validation des candidatures.  
-	Reporting et g√©n√©ration de statistiques.  
	
2.	Missions
‚Ä¢	D√©velopper une interface utilisateur ergonomique permettant une navigation intuitive pour les candidats et les gestionnaires.
‚Ä¢	Mettre en place une API REST avec Spring Boot pour g√©rer les flux de donn√©es entre le front-end et la base de donn√©es.
‚Ä¢	Int√©grer un syst√®me s√©curis√© d'authentification et de gestion des r√¥les.
‚Ä¢	Automatiser l'envoi de notifications par email pour informer les utilisateurs de l'√©tat de leurs candidatures.
‚Ä¢	G√©n√©rer des statistiques et rapports pour les gestionnaires globaux et administrateurs.
3.	Contraintes
- Ressources humaines : Une √©quipe constitu√©e de deux d√©veloppeur stagiaire sous supervision.
- D√©lais serr√©s : Le projet doit √™tre finalis√© en 6 semaines.
4.	Parties prenantes
- Candidats : Soumettent, suivent et consultent leurs candidatures.  
- Gestionnaires locaux : Acc√®s restreint √† la gestion des candidatures dans leur centre.  
- Gestionnaires globaux : Supervision globale des candidatures et des centres.  
- Administrateurs : G√®rent les utilisateurs, les centres et les param√®tres de la plateforme.
5.	Livrables d‚Äôentr√©e
- Sp√©cifications fonctionnelles et techniques.  
- Architecture technique.  
- Maquettes initiales des interfaces utilisateur.  
6.	Livrable de sortie
- Application web fonctionnelle.  
- Documentation technique et utilisateur.  
7.	Equipe de travail et r√¥les
- Stagiaires : D√©veloppement de l‚Äôapplication (front-end, back-end, base de donn√©es).  
- Encadrant : Supervision, validation des sprints, et support technique.  

III.	Etude de l‚Äôexistant


 


IV.	Etude fonctionnelle
1.	Objectifs fonctionnels
1. Permettre aux candidats de soumettre leurs candidatures via un formulaire en ligne.  
2. Proposer un tableau de bord personnalis√© selon le r√¥le de l‚Äôutilisateur.  
3. Permettre aux gestionnaires de valider ou rejeter les candidatures.  
4. G√©n√©rer des rapports et statistiques pour les gestionnaires globaux et administrateurs.   

2.	Besoins fonctionnels : Fonctionnalit√©s (user stories)
2.1 Bloc fonctionnel : Gestion des utilisateurs
R√®gle de gestion 	Description 	Type 
RG01	L‚Äôauthentification se fait via email/mot de passe pour les gestionnaires et administrateurs.	Obligatoire
RG02	Les candidats acc√®dent √† leur candidature via un num√©ro unique.	Obligatoire
RG03	Les administrateurs g√®rent les utilisateurs et leurs droits.	Obligatoire

2.2 Bloc fonctionnel : Gestion des candidatures
R√®gle de gestion 	Description 	Type 
RG01	Les candidats remplissent un formulaire pour soumettre leur candidature.	Obligatoire
RG02	Les gestionnaires locaux valident ou rejettent les candidatures.	Obligatoire
RG03	Une notification est envoy√©e par email lors de chaque changement d‚Äô√©tat.	Important
RG04	Les candidatures sont filtrables par concours, centre, et √©tat.	Important

2.3 Bloc fonctionnel : Reporting et statistiques
R√®gle de gestion 	Description 	Type 
RG01	Les gestionnaires globaux acc√®dent √† des statistiques agr√©g√©es.	Obligatoire
RG02	Les rapports sont exportables au format CSV.	Important

3.	Acteurs
Acteur	R√¥les
Candidat	-	Soumettre une candidature. 
-	Suivre une candidature.  
Gestionnaire local	-	Valider les candidatures.
-	Rejeter les candidatures.
Gestionnaire global	-	Supervision et reporting global
Administrateur	-	Gestion des utilisateurs et des param√®tres.

V.	Besoins non fonctionnels

Performance
‚Ä¢	Temps de chargement des pages inf√©rieur √† 2 secondes
‚Ä¢	Capacit√© √† g√©rer 500 utilisateurs simultan√©s
‚Ä¢	Disponibilit√© de 99,9% (hors maintenance planifi√©e)
S√©curit√©
‚Ä¢	Authentification s√©curis√©e avec double facteur optionnel
‚Ä¢	Chiffrement des donn√©es sensibles en base de donn√©es
‚Ä¢	Protection contre les injections SQL et XSS
‚Ä¢	Journalisation des √©v√©nements de s√©curit√©
Utilisabilit√©
‚Ä¢	Interface responsive pour tous appareils (desktop, tablette, mobile)
‚Ä¢	Navigation intuitive et claire
‚Ä¢	Temps d'apprentissage de l'interface inf√©rieur √† 10 minutes
Fiabilit√©
‚Ä¢	Syst√®me de reprise apr√®s incident
‚Ä¢	Sauvegarde quotidienne des donn√©es
‚Ä¢	Plan de continuit√© en cas de panne serveur

VI.	Strat√©gie de d√©veloppement et plannification
1.	M√©thodologie de d√©veloppement
- Utilisation de la m√©thode **Agile Scrum**.  
- Sprints hebdomadaires avec des livrables clairs.  
2.	D√©coupage en Lots de Travail**  

üîß Sprint 0 ‚Äì Initialisation & Pr√©paration 
Objectifs :
‚Ä¢	Mise en place de l‚Äôenvironnement de d√©veloppement (back + front).
‚Ä¢	D√©finition du Product Backlog.
‚Ä¢	Cr√©ation des entit√©s JPA : Candidat, Candidature, Centre, Concours, Utilisateur, R√¥le.
‚Ä¢	Maquettes UI pour candidats.
Livrables :
‚Ä¢	Environnement pr√™t (React, Spring Boot, DB).
‚Ä¢	Maquettes valid√©es.
‚Ä¢	Base de donn√©es initialis√©e.
‚Ä¢	Product Backlog d√©taill√©.
________________________________________
üë§ Sprint 1 ‚Äì Fonctionnalit√©s Candidats 
Objectifs :
‚Ä¢	Inscription et soumission de candidature (formulaire).
‚Ä¢	Acc√®s √† la candidature par num√©ro unique.
‚Ä¢	Tableau de bord personnel (√©tat de la candidature).
‚Ä¢	Historique ou statut de la soumission.
Livrables :
‚Ä¢	Interface candidat fonctionnelle.
‚Ä¢	API REST c√¥t√© candidature.
‚Ä¢	Lien entre front et back valid√© pour les candidatures.
________________________________________
üë®‚Äçüíº Sprint 2 ‚Äì Fonctionnalit√©s Gestionnaires Locaux 
Objectifs :
‚Ä¢	Authentification via email/mot de passe.
‚Ä¢	Validation/rejet des candidatures d‚Äôun centre.
‚Ä¢	Interface pour visualiser et filtrer les candidatures par √©tat, concours, centre.
Livrables :
‚Ä¢	Tableau de bord gestionnaire local.
‚Ä¢	Filtres et actions (valider/rejeter).
‚Ä¢	Authentification s√©curis√©e pour ce r√¥le.
________________________________________
üåç Sprint 3 ‚Äì Fonctionnalit√©s Gestionnaires Globaux 
Objectifs :
‚Ä¢	Acc√®s √† toutes les candidatures.
‚Ä¢	Statistiques agr√©g√©es (globales).
‚Ä¢	Export CSV des rapports.
Livrables :
‚Ä¢	Module de reporting op√©rationnel.
‚Ä¢	Statistiques dynamiques.
‚Ä¢	Export CSV fonctionnel.
________________________________________
üõ†Ô∏è Sprint 4 ‚Äì Fonctionnalit√©s Administrateurs + Notifications 
Objectifs :
‚Ä¢	Gestion des utilisateurs (CRUD).
‚Ä¢	Attribution des r√¥les (gestionnaires, candidats).
‚Ä¢	Param√©trage de la plateforme (ex : ajout de concours ou centres).
‚Ä¢	Int√©gration de l‚Äôenvoi d‚Äôe-mails lors du changement d‚Äô√©tat de la candidature.
Livrables :
‚Ä¢	Interface admin pour gestion des utilisateurs.
‚Ä¢	Notifications e-mail op√©rationnelles (JavaMail API).
________________________________________
üöÄ Sprint 5 ‚Äì Tests, Documentation & Livraison 
Objectifs :
‚Ä¢	Tests unitaires et d‚Äôint√©gration.
‚Ä¢	Recette fonctionnelle avec les utilisateurs tests.
‚Ä¢	Finalisation de la documentation technique & utilisateur.
‚Ä¢	D√©ploiement local (Tomcat, serveur ou Docker).
Livrables :
‚Ä¢	Application test√©e, valid√©e.
‚Ä¢	Documentation compl√®te.
‚Ä¢	Application livr√©e localement.



VII.	Architecture du syst√®me
1.	Diagrammes UML
2.	Technologies utilis√©es
Front-end : React

    React : Librairie front-end pour construire une interface utilisateur dynamique et r√©active.
    React Router : Gestion de la navigation et des routes.
    Axios : Pour consommer les API REST.
    Formik + Yup : Gestion des formulaires et validation.
    Material-UI / Ant Design : Librairie de composants pour un design moderne.
    Context API : Gestion de l'√©tat global si n√©cessaire.

Back-end : Spring Boot

    Spring Boot : Framework pour d√©velopper rapidement des applications robustes.
    Spring Data JPA : Gestion de la persistance et mapping objet-relationnel (ORM).
    Spring Security : Gestion de l'authentification et de l'autorisation.
    Spring Web (Spring MVC) : Exposition des services REST.
    Lombok : R√©duction du code boilerplate (getters, setters, etc.).
    Java Mail API : Envoi d'emails pour les notifications.
    OpenAPI : Documentation des API.

Base de donn√©es : MySQL

    MySQL : Syst√®me de gestion de bases de donn√©es relationnelles (RDBMS).
    Flyway : Gestion des migrations de base de donn√©es.

Autres

    Postman : Test des API.
    GitHub/GitLab : Suivi du code source et int√©gration continue.
3.	Architecture logicielle
- Front-end (React) ‚Üî API REST (Spring Boot) ‚Üî Base de donn√©es (MySQL).  




VIII.	Annexe
- Documentation technique et utilisateur.  
- Guide d‚Äôinstallation.  












