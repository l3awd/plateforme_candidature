# ========================================
# SCRIPT DE DIAGNOSTIC SPRING BOOT - ANALYSE D'ERREURS
# Plateforme CandidaturePlus
# ========================================

param(
    [switch]$Detailed,
    [switch]$Fix
)

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "   DIAGNOSTIC SPRING BOOT - ERREURS" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

$errors = @()
$warnings = @()
$successes = @()
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$logFile = "diagnostic_spring_boot_$timestamp.log"

function Write-Log {
    param($Message, $Color = "White")
    Write-Host $Message -ForegroundColor $Color
    Add-Content -Path $logFile -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message"
}

Write-Log "D√©but du diagnostic Spring Boot" "Green"
Write-Log "Fichier de log: $logFile" "Cyan"

# ========================================
# 1. VERIFICATION DE L'ENVIRONNEMENT JAVA
# ========================================
Write-Log "" 
Write-Log "1. VERIFICATION DE L'ENVIRONNEMENT JAVA" "Yellow"
Write-Log "=========================================" "Yellow"

# V√©rifier Java
try {
    $javaVersion = java -version 2>&1
    if ($javaVersion -match "version") {
        $javaVersionStr = ($javaVersion | Select-String "version").Line
        Write-Log "  ‚úì Java install√©: $javaVersionStr" "Green"
        $successes += "Java disponible"
        
        # V√©rifier version Java 17+
        if ($javaVersionStr -match '"(\d+)\.') {
            $majorVersion = [int]$matches[1]
            if ($majorVersion -ge 17) {
                Write-Log "  ‚úì Version Java compatible (>= 17)" "Green"
                $successes += "Version Java compatible"
            }
            else {
                Write-Log "  ‚úó Version Java incompatible (< 17). Spring Boot 3.x n√©cessite Java 17+" "Red"
                $errors += "Version Java incompatible: $majorVersion (requis: >= 17)"
            }
        }
    }
}
catch {
    Write-Log "  ‚úó Java non trouv√© ou non accessible" "Red"
    $errors += "Java non install√© ou non dans le PATH"
}

# V√©rifier Maven
try {
    $mavenVersion = mvn -version 2>&1
    if ($mavenVersion -match "Apache Maven") {
        $mavenVersionStr = ($mavenVersion | Select-String "Apache Maven").Line
        Write-Log "  ‚úì Maven install√©: $mavenVersionStr" "Green"
        $successes += "Maven disponible"
    }
}
catch {
    Write-Log "  ‚úó Maven non trouv√©" "Red"
    $errors += "Maven non install√© ou non dans le PATH"
}

# ========================================
# 2. VERIFICATION DE LA BASE DE DONNEES
# ========================================
Write-Log ""
Write-Log "2. VERIFICATION DE LA BASE DE DONNEES" "Yellow"
Write-Log "======================================" "Yellow"

# Test de connexion MySQL
try {
    $mysqlTest = mysql -u root -p1234 -e "SELECT 1;" 2>&1
    if ($mysqlTest -notmatch "ERROR") {
        Write-Log "  ‚úì Connexion MySQL r√©ussie" "Green"
        $successes += "Connexion MySQL OK"
        
        # V√©rifier base candidature_plus
        $dbTest = mysql -u root -p1234 -e "USE candidature_plus; SELECT COUNT(*) as tables_count FROM information_schema.tables WHERE table_schema = 'candidature_plus';" 2>&1
        if ($dbTest -notmatch "ERROR") {
            Write-Log "  ‚úì Base de donn√©es 'candidature_plus' accessible" "Green"
            $successes += "Base de donn√©es accessible"
        }
        else {
            Write-Log "  ‚úó Base de donn√©es 'candidature_plus' non trouv√©e" "Red"
            $errors += "Base de donn√©es candidature_plus manquante"
        }
    }
}
catch {
    Write-Log "  ‚úó Erreur de connexion MySQL" "Red"
    $errors += "Connexion MySQL √©chou√©e - v√©rifier si MySQL est d√©marr√©"
}

# ========================================
# 3. ANALYSE DU PROJET SPRING BOOT
# ========================================
Write-Log ""
Write-Log "3. ANALYSE DU PROJET SPRING BOOT" "Yellow"
Write-Log "=================================" "Yellow"

Set-Location "backend"

# V√©rifier structure du projet
Write-Log "V√©rification de la structure du projet..." "White"
if (Test-Path "pom.xml") {
    Write-Log "  ‚úì pom.xml trouv√©" "Green"
    $successes += "Structure Maven correcte"
}
else {
    Write-Log "  ‚úó pom.xml manquant" "Red"
    $errors += "Fichier pom.xml manquant"
}

if (Test-Path "src\main\java\com\example\candidatureplus\CandidaturePlusApplication.java") {
    Write-Log "  ‚úì Classe principale Spring Boot trouv√©e" "Green"
    $successes += "Classe principale pr√©sente"
}
else {
    Write-Log "  ‚úó Classe principale Spring Boot manquante" "Red"
    $errors += "CandidaturePlusApplication.java manquant"
}

# V√©rifier application.properties
if (Test-Path "src\main\resources\application.properties") {
    Write-Log "  ‚úì application.properties trouv√©" "Green"
    $successes += "Configuration application pr√©sente"
    
    # Analyser le contenu
    $appProps = Get-Content "src\main\resources\application.properties" -Raw
    if ($appProps -match "spring.datasource.url=jdbc:mysql://localhost:3306/candidature_plus") {
        Write-Log "  ‚úì Configuration base de donn√©es correcte" "Green"
    }
    else {
        Write-Log "  ‚ö† Configuration base de donn√©es douteuse" "Yellow"
        $warnings += "Configuration base de donn√©es √† v√©rifier"
    }
}
else {
    Write-Log "  ‚úó application.properties manquant" "Red"
    $errors += "Fichier application.properties manquant"
}

# ========================================
# 4. TEST DE COMPILATION MAVEN
# ========================================
Write-Log ""
Write-Log "4. TEST DE COMPILATION MAVEN" "Yellow"
Write-Log "============================" "Yellow"

Write-Log "Nettoyage du projet Maven..." "White"
$cleanResult = & mvn clean 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Log "  ‚úì Nettoyage Maven r√©ussi" "Green"
    $successes += "Nettoyage Maven OK"
}
else {
    Write-Log "  ‚úó Echec du nettoyage Maven" "Red"
    Write-Log "Erreur: $cleanResult" "Red"
    $errors += "Echec nettoyage Maven"
}

Write-Log "Compilation du projet..." "White"
$compileStart = Get-Date
$compileResult = & mvn compile -X 2>&1
$compileEnd = Get-Date
$compileDuration = ($compileEnd - $compileStart).TotalSeconds

if ($LASTEXITCODE -eq 0) {
    Write-Log "  ‚úì Compilation r√©ussie en $([math]::Round($compileDuration, 2)) secondes" "Green"
    $successes += "Compilation Maven r√©ussie"
}
else {
    Write-Log "  ‚úó Echec de la compilation Maven" "Red"
    Write-Log "Dur√©e avant √©chec: $([math]::Round($compileDuration, 2)) secondes" "Red"
    $errors += "Echec compilation Maven"
    
    # Analyser les erreurs de compilation en d√©tail
    Write-Log ""
    Write-Log "ANALYSE DETAILLEE DES ERREURS DE COMPILATION:" "Red"
    Write-Log "=============================================" "Red"
    
    # Classifier les erreurs
    $errorClassification = @{
        "Erreurs de syntaxe Java" = @()
        "Imports manquants"       = @()
        "Annotations Spring"      = @()
        "D√©pendances Maven"       = @()
        "Erreurs JPA/Hibernate"   = @()
        "Autres erreurs"          = @()
    }
    
    $allErrorLines = $compileResult | Where-Object { $_ -match "\[ERROR\]" }
    
    foreach ($errorLine in $allErrorLines) {
        $classified = $false
        
        if ($errorLine -match "(cannot find symbol|package.*does not exist|import.*cannot be resolved)") {
            $errorClassification["Imports manquants"] += $errorLine
            $classified = $true
        }
        elseif ($errorLine -match "(@Autowired|@Service|@Repository|@Controller|@RestController|@Component|@Entity)") {
            $errorClassification["Annotations Spring"] += $errorLine
            $classified = $true
        }
        elseif ($errorLine -match "(JPA|Hibernate|@Column|@Table|@Entity|@Id)") {
            $errorClassification["Erreurs JPA/Hibernate"] += $errorLine
            $classified = $true
        }
        elseif ($errorLine -match "(';' expected|illegal start of expression|')' expected|'}' expected)") {
            $errorClassification["Erreurs de syntaxe Java"] += $errorLine
            $classified = $true
        }
        elseif ($errorLine -match "(Failed to execute goal|artifact.*not found|dependency.*failed)") {
            $errorClassification["D√©pendances Maven"] += $errorLine
            $classified = $true
        }
        
        if (-not $classified) {
            $errorClassification["Autres erreurs"] += $errorLine
        }
    }
    
    # Afficher les erreurs classifi√©es
    foreach ($category in $errorClassification.Keys) {
        if ($errorClassification[$category].Count -gt 0) {
            Write-Log "  üìÇ $category ($($errorClassification[$category].Count) erreur(s)):" "Yellow"
            foreach ($errorItem in $errorClassification[$category] | Select-Object -First 5) {
                Write-Log "    $errorItem" "Red"
            }
            if ($errorClassification[$category].Count -gt 5) {
                Write-Log "    ... et $($errorClassification[$category].Count - 5) autres erreurs similaires" "Gray"
            }
            Write-Log "" "White"
        }
    }
    
    # Suggestions sp√©cifiques bas√©es sur les erreurs d√©tect√©es
    Write-Log "SUGGESTIONS DE CORRECTION DETAILLEES:" "Cyan"
    Write-Log "====================================" "Cyan"
    
    if ($errorClassification["Imports manquants"].Count -gt 0) {
        Write-Log "  üîß IMPORTS MANQUANTS:" "Yellow"
        Write-Log "    1. V√©rifier que toutes les d√©pendances sont dans pom.xml" "White"
        Write-Log "    2. Ex√©cuter: mvn clean compile -U" "White"
        Write-Log "    3. V√©rifier les versions des d√©pendances Spring Boot" "White"
    }
    
    if ($errorClassification["Annotations Spring"].Count -gt 0) {
        Write-Log "  üè∑Ô∏è ANNOTATIONS SPRING:" "Yellow"
        Write-Log "    1. V√©rifier import org.springframework.beans.factory.annotation.Autowired" "White"
        Write-Log "    2. V√©rifier import org.springframework.stereotype.*" "White"
        Write-Log "    3. V√©rifier import org.springframework.web.bind.annotation.*" "White"
    }
    
    if ($errorClassification["Erreurs JPA/Hibernate"].Count -gt 0) {
        Write-Log "  üóÑÔ∏è JPA/HIBERNATE:" "Yellow"
        Write-Log "    1. V√©rifier import jakarta.persistence.*" "White"
        Write-Log "    2. V√©rifier les annotations @Entity, @Table, @Column" "White"
        Write-Log "    3. V√©rifier la configuration JPA dans application.properties" "White"
    }
    
    if ($errorClassification["Erreurs de syntaxe Java"].Count -gt 0) {
        Write-Log "  ‚ö†Ô∏è SYNTAXE JAVA:" "Yellow"
        Write-Log "    1. V√©rifier les accolades et parenth√®ses" "White"
        Write-Log "    2. V√©rifier les points-virgules manquants" "White"
        Write-Log "    3. Utiliser un IDE pour identifier les erreurs de syntaxe" "White"
    }
    
    if ($errorClassification["D√©pendances Maven"].Count -gt 0) {
        Write-Log "  üì¶ DEPENDANCES MAVEN:" "Yellow"
        Write-Log "    1. Ex√©cuter: mvn clean install -U" "White"
        Write-Log "    2. Supprimer le dossier .m2/repository et relancer" "White"
        Write-Log "    3. V√©rifier la connectivit√© internet pour t√©l√©charger les d√©pendances" "White"
    }
    
    # Sauvegarder les logs de compilation
    $compileLogFile = "compilation_errors_detailed_$timestamp.log"
    $compileResult | Out-File -FilePath $compileLogFile -Encoding UTF8
    Write-Log "Logs de compilation d√©taill√©s sauv√©s dans: $compileLogFile" "Cyan"
    
    # Analyser le fichier pom.xml pour des probl√®mes potentiels
    Write-Log ""
    Write-Log "VERIFICATION POM.XML:" "Cyan"
    Write-Log "====================" "Cyan"
    
    if (Test-Path "pom.xml") {
        $pomContent = Get-Content "pom.xml" -Raw
        
        # V√©rifier version Java
        if ($pomContent -match "<java.version>(\d+)</java.version>") {
            $javaVersion = $matches[1]
            Write-Log "  Version Java dans pom.xml: $javaVersion" "White"
            if ([int]$javaVersion -lt 17) {
                Write-Log "  ‚ö†Ô∏è Version Java trop ancienne pour Spring Boot 3.x" "Yellow"
                $warnings += "Version Java dans pom.xml < 17"
            }
        }
        
        # V√©rifier version Spring Boot
        if ($pomContent -match "<version>([0-9]+\.[0-9]+\.[0-9]+)</version>") {
            $springBootVersion = $matches[1]
            Write-Log "  Version Spring Boot: $springBootVersion" "White"
        }
        
        # V√©rifier d√©pendances critiques
        $criticalDependencies = @("spring-boot-starter-web", "spring-boot-starter-data-jpa", "mysql-connector-j")
        foreach ($dep in $criticalDependencies) {
            if ($pomContent -match $dep) {
                Write-Log "  ‚úì D√©pendance $dep pr√©sente" "Green"
            }
            else {
                Write-Log "  ‚úó D√©pendance $dep manquante" "Red"
                $errors += "D√©pendance critique manquante: $dep"
            }
        }
    }
}

# ========================================
# 5. TEST DE DEMARRAGE SPRING BOOT DETAILLE
# ========================================
Write-Log ""
Write-Log "5. TEST DE DEMARRAGE SPRING BOOT DETAILLE" "Yellow"
Write-Log "==========================================" "Yellow"

if ($errors -notcontains "Echec compilation Maven") {
    Write-Log "Tentative de d√©marrage Spring Boot avec logs d√©taill√©s..." "White"
    
    # Cr√©er un fichier de log sp√©cifique pour ce test
    $springBootLogFile = "spring_boot_startup_detailed_$timestamp.log"
    
    # D√©marrer Spring Boot avec logging maximum
    Write-Log "D√©marrage avec mvn spring-boot:run -X..." "White"
    $springBootJob = Start-Job -ScriptBlock {
        param($workingDir, $logFile)
        Set-Location $workingDir
        & mvn spring-boot:run -X 2>&1 | Tee-Object -FilePath $logFile
    } -ArgumentList (Get-Location).Path, $springBootLogFile
    
    Write-Log "Job Spring Boot d√©marr√© (ID: $($springBootJob.Id))" "Cyan"
    Write-Log "Logs sauv√©s en temps r√©el dans: $springBootLogFile" "Cyan"
    Write-Log "Attente du d√©marrage (60 secondes)..." "White"
    
    # Surveiller le d√©marrage avec plus de d√©tails
    $startTime = Get-Date
    $timeout = 60
    $started = $false
    $lastLogSize = 0
    
    while (((Get-Date) - $startTime).TotalSeconds -lt $timeout -and -not $started) {
        Start-Sleep -Seconds 3
        
        # V√©rifier si le port 8080 est ouvert
        $portCheck = netstat -ano | Select-String ":8080.*LISTENING"
        if ($portCheck) {
            Write-Log "  ‚úì Spring Boot d√©marr√© - Port 8080 actif" "Green"
            $successes += "Spring Boot d√©marr√© avec succ√®s"
            $started = $true
            
            # Test rapide de l'API
            Start-Sleep -Seconds 5
            try {
                $healthCheck = Invoke-WebRequest "http://localhost:8080/api/health" -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
                Write-Log "  ‚úì Application accessible - Status: $($healthCheck.StatusCode)" "Green"
                $successes += "Application web accessible"
            }
            catch {
                Write-Log "  ‚ö† Application d√©marr√©e mais API non accessible" "Yellow"
                Write-Log "    Erreur: $($_.Exception.Message)" "Yellow"
                $warnings += "Application non accessible via HTTP"
            }
        }
        else {
            # Analyser les logs en temps r√©el si disponibles
            if (Test-Path $springBootLogFile) {
                $currentLogSize = (Get-Item $springBootLogFile).Length
                if ($currentLogSize -gt $lastLogSize) {
                    $newContent = Get-Content $springBootLogFile -Tail 10
                    $errorLines = $newContent | Where-Object { $_ -match "(ERROR|FATAL|Exception|Failed|Error)" }
                    if ($errorLines) {
                        Write-Log "  üîç Erreurs d√©tect√©es dans les logs:" "Red"
                        foreach ($errorLine in $errorLines | Select-Object -First 3) {
                            Write-Log "    $errorLine" "Red"
                        }
                    }
                    $lastLogSize = $currentLogSize
                }
            }
        }
    }
    
    if (-not $started) {
        Write-Log "  ‚úó Timeout - Spring Boot n'a pas d√©marr√© dans les $timeout secondes" "Red"
        $errors += "Timeout d√©marrage Spring Boot"
        
        # Analyser les logs d'erreur en d√©tail
        if (Test-Path $springBootLogFile) {
            Write-Log ""
            Write-Log "ANALYSE DETAILLEE DES LOGS SPRING BOOT:" "Red"
            Write-Log "======================================" "Red"
            
            $logContent = Get-Content $springBootLogFile
            
            # Rechercher des erreurs sp√©cifiques
            $errorPatterns = @{
                "Base de donn√©es" = @("Connection.*refused", "Access denied", "Unknown database", "mysql", "jdbc")
                "Port occup√©"     = @("Port.*already in use", "Address already in use", "bind.*failed")
                "Configuration"   = @("application.properties", "Configuration.*failed", "Bean.*failed")
                "D√©pendances"     = @("ClassNotFoundException", "NoClassDefFoundError", "dependency.*failed")
                "Annotation"      = @("annotation.*failed", "@.*not found", "Component.*failed")
                "JPA/Hibernate"   = @("hibernate", "jpa", "entity.*failed", "repository.*failed")
                "Spring Security" = @("security.*failed", "authentication.*failed", "authorization.*failed")
            }
            
            $detectedErrors = @{}
            foreach ($category in $errorPatterns.Keys) {
                $patterns = $errorPatterns[$category]
                $matchingLines = $logContent | Where-Object { 
                    $line = $_
                    $patterns | Where-Object { $line -match $_ }
                }
                if ($matchingLines) {
                    $detectedErrors[$category] = $matchingLines | Select-Object -First 3
                }
            }
            
            if ($detectedErrors.Count -gt 0) {
                Write-Log "Erreurs classifi√©es d√©tect√©es:" "Red"
                foreach ($category in $detectedErrors.Keys) {
                    Write-Log "  üìÇ $category" "Yellow"
                    foreach ($errorItem in $detectedErrors[$category]) {
                        Write-Log "    $errorItem" "Red"
                    }
                }
            }
            else {
                # Afficher les derni√®res erreurs g√©n√©rales
                $generalErrors = $logContent | Where-Object { $_ -match "(ERROR|FATAL|Exception|Failed)" } | Select-Object -Last 10
                if ($generalErrors) {
                    Write-Log "Derni√®res erreurs g√©n√©rales:" "Red"
                    foreach ($errorItem in $generalErrors) {
                        Write-Log "  $errorItem" "Red"
                    }
                }
            }
            
            # Chercher des causes sp√©cifiques
            Write-Log ""
            Write-Log "DIAGNOSTIC CAUSES PROBABLES:" "Cyan"
            Write-Log "============================" "Cyan"
            
            if ($logContent | Where-Object { $_ -match "refused.*3306" }) {
                Write-Log "  üíæ CAUSE: MySQL n'est pas d√©marr√© ou inaccessible" "Red"
                Write-Log "    SOLUTION: net start mysql ou v√©rifier le service MySQL" "Yellow"
                $errors += "MySQL non accessible - Service arr√™t√©"
            }
            
            if ($logContent | Where-Object { $_ -match "Access denied.*user.*root" }) {
                Write-Log "  üîë CAUSE: Mot de passe MySQL incorrect" "Red"
                Write-Log "    SOLUTION: V√©rifier spring.datasource.password dans application.properties" "Yellow"
                $errors += "Mot de passe MySQL incorrect"
            }
            
            if ($logContent | Where-Object { $_ -match "Unknown database.*candidature_plus" }) {
                Write-Log "  üóÑÔ∏è CAUSE: Base de donn√©es candidature_plus n'existe pas" "Red"
                Write-Log "    SOLUTION: Ex√©cuter init_database.sql pour cr√©er la base" "Yellow"
                $errors += "Base de donn√©es candidature_plus manquante"
            }
            
            if ($logContent | Where-Object { $_ -match "Port.*8080.*already in use" }) {
                Write-Log "  üö™ CAUSE: Port 8080 d√©j√† occup√©" "Red"
                Write-Log "    SOLUTION: Tuer le processus sur le port 8080 ou changer le port" "Yellow"
                $errors += "Port 8080 occup√©"
            }
            
            if ($logContent | Where-Object { $_ -match "ClassNotFoundException|NoClassDefFoundError" }) {
                Write-Log "  üì¶ CAUSE: D√©pendances manquantes ou corrompues" "Red"
                Write-Log "    SOLUTION: mvn clean install -U pour r√©installer les d√©pendances" "Yellow"
                $errors += "D√©pendances Maven corrompues"
            }
            
            if ($logContent | Where-Object { $_ -match "hibernate.*table.*doesn't exist" }) {
                Write-Log "  üìã CAUSE: Tables de base de donn√©es manquantes" "Red"
                Write-Log "    SOLUTION: Ex√©cuter les scripts SQL de cr√©ation des tables" "Yellow"
                $errors += "Tables de base de donn√©es manquantes"
            }
        }
        else {
            Write-Log "  ‚úó Impossible de lire les logs de d√©marrage" "Red"
            $errors += "Logs de d√©marrage non disponibles"
        }
    }
    
    # Arr√™ter le job
    Stop-Job -Job $springBootJob -ErrorAction SilentlyContinue
    Remove-Job -Job $springBootJob -ErrorAction SilentlyContinue
    
}
else {
    Write-Log "D√©marrage ignor√© - Erreurs de compilation d√©tect√©es" "Yellow"
}

# ========================================
# 6. ANALYSE DES DEPENDANCES
# ========================================
Write-Log ""
Write-Log "6. ANALYSE DES DEPENDANCES" "Yellow"
Write-Log "===========================" "Yellow"

Write-Log "V√©rification de l'arbre des d√©pendances Maven..." "White"
$dependencyResult = & mvn dependency:tree 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Log "  ‚úì Analyse des d√©pendances r√©ussie" "Green"
    $successes += "D√©pendances Maven OK"
    
    # V√©rifier les conflits
    $conflicts = $dependencyResult | Where-Object { $_ -match "conflict" }
    if ($conflicts) {
        Write-Log "  ‚ö† Conflits de d√©pendances d√©tect√©s:" "Yellow"
        foreach ($conflict in $conflicts) {
            Write-Log "    $conflict" "Yellow"
        }
        $warnings += "Conflits de d√©pendances pr√©sents"
    }
    else {
        Write-Log "  ‚úì Aucun conflit de d√©pendances" "Green"
    }
}
else {
    Write-Log "  ‚úó Echec de l'analyse des d√©pendances" "Red"
    $errors += "Probl√®me avec les d√©pendances Maven"
}

# ========================================
# 7. RAPPORT FINAL ET SUGGESTIONS
# ========================================
Write-Log ""
Write-Log "7. RAPPORT FINAL ET SUGGESTIONS" "Yellow"
Write-Log "===============================" "Yellow"

Write-Log ""
Write-Log "RESUME DU DIAGNOSTIC:" "Cyan"
Write-Log "=====================" "Cyan"
Write-Log "‚úì Succ√®s: $($successes.Count)" "Green"
Write-Log "‚ö† Avertissements: $($warnings.Count)" "Yellow"
Write-Log "‚úó Erreurs: $($errors.Count)" "Red"

if ($successes.Count -gt 0) {
    Write-Log ""
    Write-Log "ELEMENTS FONCTIONNELS:" "Green"
    foreach ($success in $successes) {
        Write-Log "  ‚úì $success" "Green"
    }
}

if ($warnings.Count -gt 0) {
    Write-Log ""
    Write-Log "AVERTISSEMENTS:" "Yellow"
    foreach ($warning in $warnings) {
        Write-Log "  ‚ö† $warning" "Yellow"
    }
}

if ($errors.Count -gt 0) {
    Write-Log ""
    Write-Log "ERREURS DETECTEES:" "Red"
    foreach ($errorItem in $errors) {
        Write-Log "  ‚úó $errorItem" "Red"
    }
    
    Write-Log ""
    Write-Log "SUGGESTIONS DE CORRECTION:" "Cyan"
    Write-Log "==========================" "Cyan"
    
    foreach ($errorItem in $errors) {
        switch -Regex ($errorItem) {
            "Version Java incompatible" {
                Write-Log "‚Üí Installer Java 17 ou plus r√©cent" "White"
                Write-Log "  T√©l√©charger depuis: https://adoptium.net/" "Gray"
            }
            "Maven non install√©" {
                Write-Log "‚Üí Installer Apache Maven" "White"
                Write-Log "  T√©l√©charger depuis: https://maven.apache.org/download.cgi" "Gray"
            }
            "Connexion MySQL √©chou√©e" {
                Write-Log "‚Üí V√©rifier que MySQL est d√©marr√©" "White"
                Write-Log "  Services ‚Üí MySQL ‚Üí D√©marrer" "Gray"
                Write-Log "  Ou via ligne de commande: net start mysql" "Gray"
            }
            "Base de donn√©es candidature_plus manquante" {
                Write-Log "‚Üí Cr√©er la base de donn√©es candidature_plus" "White"
                Write-Log "  Ex√©cuter: Get-Content init_database.sql | mysql -u root -p" "Gray"
            }
            "Echec compilation Maven" {
                Write-Log "‚Üí V√©rifier les erreurs de compilation dans les logs" "White"
                Write-Log "  Fichier: compilation_errors_$timestamp.log" "Gray"
                Write-Log "  Corriger les erreurs Java et relancer mvn compile" "Gray"
            }
            "Timeout d√©marrage Spring Boot" {
                Write-Log "‚Üí Analyser les logs de d√©marrage Spring Boot" "White"
                Write-Log "  Fichier: spring_boot_startup_$timestamp.log" "Gray"
                Write-Log "  V√©rifier la configuration dans application.properties" "Gray"
            }
            "Probl√®me avec les d√©pendances Maven" {
                Write-Log "‚Üí Nettoyer et r√©installer les d√©pendances" "White"
                Write-Log "  mvn clean install -U" "Gray"
            }
        }
    }
    
    Write-Log ""
    Write-Log "COMMANDES DE CORRECTION AUTOMATIQUE:" "Cyan"
    if ($Fix) {
        Write-Log "Mode correction automatique activ√©..." "Yellow"
        
        # Correction automatique pour certains probl√®mes
        if ($errors -match "Base de donn√©es candidature_plus manquante") {
            Write-Log "Tentative de cr√©ation de la base de donn√©es..." "White"
            if (Test-Path "init_database.sql") {
                $dbCreateResult = Get-Content "init_database.sql" | & mysql -u root -p1234 2>&1
                if ($LASTEXITCODE -eq 0) {
                    Write-Log "  ‚úì Base de donn√©es cr√©√©e avec succ√®s" "Green"
                }
                else {
                    Write-Log "  ‚úó Echec de cr√©ation de la base de donn√©es" "Red"
                    Write-Log "  Erreur: $dbCreateResult" "Red"
                }
            }
        }
        
        if ($errors -match "Echec compilation Maven") {
            Write-Log "Tentative de nettoyage et recompilation..." "White"
            Set-Location "backend"
            $cleanInstallResult = & mvn clean install -DskipTests 2>&1
            Set-Location ".."
            if ($LASTEXITCODE -eq 0) {
                Write-Log "  ‚úì Recompilation r√©ussie" "Green"
            }
            else {
                Write-Log "  ‚úó Echec de recompilation" "Red"
                Write-Log "  D√©tails: $cleanInstallResult" "Red"
            }
        }
    }
        
}
else {
    Write-Log "Pour correction automatique, relancer avec: .\diagnostic_app.ps1 -Fix" "Gray"
}
    
}
else {
    Write-Log ""
    Write-Log "üéâ AUCUNE ERREUR DETECTEE - SYSTEME OPERATIONNEL!" "Green"
    Write-Log ""
    Write-Log "L'application CandidaturePlus semble fonctionner correctement." "Green"
    Write-Log "Vous pouvez acc√©der √†:" "White"
    Write-Log "  ‚Ä¢ Backend: http://localhost:8080/" "Cyan"
    Write-Log "  ‚Ä¢ Frontend: http://localhost:3000/" "Cyan"
}

# ========================================
# 8. INFORMATIONS COMPLEMENTAIRES
# ========================================
Write-Log ""
Write-Log "8. INFORMATIONS COMPLEMENTAIRES" "Yellow"
Write-Log "===============================" "Yellow"

Write-Log "Fichiers de logs g√©n√©r√©s:" "White"
Write-Log "  ‚Ä¢ $logFile (rapport complet)" "Cyan"
if (Test-Path "compilation_errors_$timestamp.log") {
    Write-Log "  ‚Ä¢ compilation_errors_$timestamp.log (erreurs compilation)" "Cyan"
}
if (Test-Path "spring_boot_startup_$timestamp.log") {
    Write-Log "  ‚Ä¢ spring_boot_startup_$timestamp.log (logs d√©marrage)" "Cyan"
}

Write-Log ""
Write-Log "Diagnostic termin√© √† $(Get-Date -Format 'HH:mm:ss')" "Cyan"
Write-Log "Dur√©e totale: $([math]::Round(((Get-Date) - $startTime).TotalMinutes, 2)) minutes" "Cyan"

# Afficher un r√©sum√© dans la console m√™me en cas d'erreur
Write-Host ""
Write-Host "========================================" -ForegroundColor Magenta
Write-Host "         RESULTAT DU DIAGNOSTIC         " -ForegroundColor Magenta
Write-Host "========================================" -ForegroundColor Magenta
Write-Host "‚úì Succ√®s: $($successes.Count)" -ForegroundColor Green
Write-Host "‚ö† Avertissements: $($warnings.Count)" -ForegroundColor Yellow
Write-Host "‚úó Erreurs: $($errors.Count)" -ForegroundColor Red
Write-Host ""
if ($errors.Count -eq 0) {
    Write-Host "üéâ SYSTEME OPERATIONNEL!" -ForegroundColor Green
}
else {
    Write-Host "‚ùå PROBLEMES DETECTES - Voir le fichier $logFile pour les d√©tails" -ForegroundColor Red
}
Write-Host "========================================" -ForegroundColor Magenta

# Test des documents syst√®me (optionnel)
if (Test-Path "documents") {
    Write-Host "  ‚úì Syst√®me de documents accessible" -ForegroundColor Green
}
else {
    Write-Host "  ‚ö† Syst√®me de documents non accessible (normal si pas de fichiers)" -ForegroundColor Yellow
    $warnings += "Documents non accessibles"
}

# ========================================
# 9. TESTS BASE DE DONNEES APPROFONDIS
# ========================================
Write-Host ""
Write-Host "9. TESTS BASE DE DONNEES APPROFONDIS" -ForegroundColor Yellow
Write-Host "====================================" -ForegroundColor Yellow

# Test des tables Log_Action et Notification
Write-Host "V√©rification des nouvelles tables (Log_Action, Notification)..." -ForegroundColor White
try {
    # Test direct de la table Log_Action via l'API
    $logsTestResponse = Invoke-WebRequest "http://localhost:8080/api/logs/test" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $logsTest = $logsTestResponse.Content | ConvertFrom-Json
    
    if ($logsTest.status -eq "OK") {
        Write-Host "  ‚úì Table Log_Action op√©rationnelle" -ForegroundColor Green
        Write-Host "    Total logs dans la base: $($logsTest.total_logs)" -ForegroundColor Cyan
        $successes += "Table Log_Action fonctionnelle avec $($logsTest.total_logs) entr√©es"
    }
    
    # Test direct de la table Notification via l'API
    $notifTestResponse = Invoke-WebRequest "http://localhost:8080/api/notifications/test" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $notifTest = $notifTestResponse.Content | ConvertFrom-Json
    
    if ($notifTest.status -eq "OK") {
        Write-Host "  ‚úì Table Notification op√©rationnelle" -ForegroundColor Green
        Write-Host "    Total notifications dans la base: $($notifTest.total_notifications)" -ForegroundColor Cyan
        $successes += "Table Notification fonctionnelle avec $($notifTest.total_notifications) entr√©es"
    }
}
catch {
    # Si les nouveaux endpoints ne sont pas disponibles, tester avec l'ancien m√©thode
    try {
        $response = Invoke-WebRequest "http://localhost:8080/api/auth/current" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        Write-Host "  ‚úì Tables syst√®me accessibles via l'API" -ForegroundColor Green
        $successes += "Tables Log_Action et Notification pr√©sentes"
    }
    catch {
        Write-Host "  ‚ö† Impossible de v√©rifier les tables syst√®me" -ForegroundColor Yellow
        $warnings += "Tables syst√®me non v√©rifiables"
    }
}

# Test des donn√©es de test avec diagnostic approfondi
Write-Host "V√©rification des donn√©es de test (utilisateurs, concours, centres)..." -ForegroundColor White
try {
    # Test des centres
    $centresResponse = Invoke-WebRequest "http://localhost:8080/api/centres" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $centres = $centresResponse.Content | ConvertFrom-Json
    Write-Host "  üìä CENTRES D√âTECTION:" -ForegroundColor Cyan
    if ($centres -and $centres.Count -gt 0) {
        Write-Host "    ‚úì Centres trouv√©s: $($centres.Count)" -ForegroundColor Green
        foreach ($centre in $centres | Select-Object -First 3) {
            Write-Host "      - ID: $($centre.id), Nom: $($centre.nom), Ville: $($centre.ville)" -ForegroundColor Gray
        }
        if ($centres.Count -ge 5) {
            $successes += "Donn√©es de test centres pr√©sentes ($($centres.Count) centres)"
        }
        else {
            $warnings += "Donn√©es de test centres incompl√®tes ($($centres.Count) centres)"
        }
    }
    else {
        Write-Host "    ‚úó Aucun centre trouv√© ou donn√©es vides" -ForegroundColor Red
        Write-Host "    üîç Type de r√©ponse: $($centres.GetType().Name)" -ForegroundColor Yellow
        Write-Host "    üîç Contenu brut: $($centresResponse.Content)" -ForegroundColor Yellow
        $errors += "Centres de test absents"
    }

    # Test des concours
    $concoursResponse = Invoke-WebRequest "http://localhost:8080/api/concours" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $concours = $concoursResponse.Content | ConvertFrom-Json
    Write-Host "  üìä CONCOURS D√âTECTION:" -ForegroundColor Cyan
    if ($concours -and $concours.Count -gt 0) {
        Write-Host "    ‚úì Concours trouv√©s: $($concours.Count)" -ForegroundColor Green
        foreach ($concour in $concours | Select-Object -First 3) {
            $dateDebut = if ($concour.dateDebutCandidature) { $concour.dateDebutCandidature } else { "Non d√©finie" }
            $dateFin = if ($concour.dateFinCandidature) { $concour.dateFinCandidature } else { "Non d√©finie" }
            Write-Host "      - ID: $($concour.id), Nom: $($concour.nom)" -ForegroundColor Gray
            Write-Host "        Dates: $dateDebut ‚Üí $dateFin" -ForegroundColor Gray
            Write-Host "        Actif: $($concour.actif)" -ForegroundColor Gray
        }
        if ($concours.Count -ge 3) {
            $successes += "Donn√©es de test concours pr√©sentes ($($concours.Count) concours)"
        }
        else {
            $warnings += "Donn√©es de test concours incompl√®tes ($($concours.Count) concours)"
        }
    }
    else {
        Write-Host "    ‚úó Aucun concours trouv√© ou donn√©es vides" -ForegroundColor Red
        Write-Host "    üîç Type de r√©ponse: $($concours.GetType().Name)" -ForegroundColor Yellow
        Write-Host "    üîç Contenu brut: $($concoursResponse.Content)" -ForegroundColor Yellow
        $errors += "Concours de test absents"
    }

    # Test des sp√©cialit√©s
    $specialitesResponse = Invoke-WebRequest "http://localhost:8080/api/specialites" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $specialites = $specialitesResponse.Content | ConvertFrom-Json
    Write-Host "  üìä SP√âCIALIT√âS D√âTECTION:" -ForegroundColor Cyan
    if ($specialites -and $specialites.Count -gt 0) {
        Write-Host "    ‚úì Sp√©cialit√©s trouv√©es: $($specialites.Count)" -ForegroundColor Green
        foreach ($specialite in $specialites | Select-Object -First 5) {
            Write-Host "      - ID: $($specialite.id), Code: $($specialite.code), Nom: $($specialite.nom)" -ForegroundColor Gray
        }
        if ($specialites.Count -ge 10) {
            $successes += "Donn√©es de test sp√©cialit√©s pr√©sentes ($($specialites.Count) sp√©cialit√©s)"
        }
        else {
            $warnings += "Donn√©es de test sp√©cialit√©s incompl√®tes ($($specialites.Count) sp√©cialit√©s)"
        }
    }
    else {
        Write-Host "    ‚úó Aucune sp√©cialit√© trouv√©e ou donn√©es vides" -ForegroundColor Red
        Write-Host "    üîç Type de r√©ponse: $($specialites.GetType().Name)" -ForegroundColor Yellow
        Write-Host "    üîç Contenu brut: $($specialitesResponse.Content)" -ForegroundColor Yellow
        $errors += "Sp√©cialit√©s de test absentes"
    }

    # ========================================
    # DIAGNOSTIC SP√âCIFIQUE POUR LES POSTES
    # ========================================
    Write-Host "  üéØ DIAGNOSTIC POSTES DISPONIBLES:" -ForegroundColor Cyan
    
    # Test des liaisons concours-sp√©cialit√©s
    try {
        $concoursSpecialitesResponse = Invoke-WebRequest "http://localhost:8080/api/concours/1/specialites" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        $concoursSpecialites = $concoursSpecialitesResponse.Content | ConvertFrom-Json
        if ($concoursSpecialites -and $concoursSpecialites.Count -gt 0) {
            Write-Host "    ‚úì Liaisons concours-sp√©cialit√©s trouv√©es: $($concoursSpecialites.Count)" -ForegroundColor Green
            $successes += "Liaisons concours-sp√©cialit√©s pr√©sentes"
        }
        else {
            Write-Host "    ‚úó Aucune liaison concours-sp√©cialit√© trouv√©e" -ForegroundColor Red
            $errors += "Liaisons concours-sp√©cialit√©s absentes"
        }
    }
    catch {
        Write-Host "    ‚ö† Endpoint concours-sp√©cialit√©s non disponible" -ForegroundColor Yellow
        $warnings += "Endpoint concours-sp√©cialit√©s non accessible"
    }

    # Test des liaisons centre-sp√©cialit√©s
    try {
        $centreSpecialitesResponse = Invoke-WebRequest "http://localhost:8080/api/centres/1/specialites" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        $centreSpecialites = $centreSpecialitesResponse.Content | ConvertFrom-Json
        if ($centreSpecialites -and $centreSpecialites.Count -gt 0) {
            Write-Host "    ‚úì Liaisons centre-sp√©cialit√©s trouv√©es: $($centreSpecialites.Count)" -ForegroundColor Green
            $successes += "Liaisons centre-sp√©cialit√©s pr√©sentes"
        }
        else {
            Write-Host "    ‚úó Aucune liaison centre-sp√©cialit√© trouv√©e" -ForegroundColor Red
            $errors += "Liaisons centre-sp√©cialit√©s absentes"
        }
    }
    catch {
        Write-Host "    ‚ö† Endpoint centre-sp√©cialit√©s non disponible" -ForegroundColor Yellow
        $warnings += "Endpoint centre-sp√©cialit√©s non accessible"
    }

    # V√©rification des dates de concours
    Write-Host "  üìÖ DIAGNOSTIC DATES CONCOURS:" -ForegroundColor Cyan
    $dateActuelle = Get-Date
    $concoursOuverts = 0
    $concoursFermes = 0
    $concoursInvalides = 0

    foreach ($concour in $concours) {
        if ($concour.dateDebutCandidature -and $concour.dateFinCandidature) {
            try {
                $dateDebut = [DateTime]::Parse($concour.dateDebutCandidature)
                $dateFin = [DateTime]::Parse($concour.dateFinCandidature)
                
                if ($dateActuelle -ge $dateDebut -and $dateActuelle -le $dateFin) {
                    $concoursOuverts++
                    Write-Host "    ‚úì $($concour.nom): OUVERT (fin le $($dateFin.ToString('dd/MM/yyyy')))" -ForegroundColor Green
                }
                elseif ($dateActuelle -lt $dateDebut) {
                    Write-Host "    ‚è∞ $($concour.nom): FUTUR (ouverture le $($dateDebut.ToString('dd/MM/yyyy')))" -ForegroundColor Yellow
                }
                else {
                    $concoursFermes++
                    Write-Host "    ‚úó $($concour.nom): FERM√â (ferm√© le $($dateFin.ToString('dd/MM/yyyy')))" -ForegroundColor Red
                }
            }
            catch {
                $concoursInvalides++
                Write-Host "    ‚ö† $($concour.nom): Dates invalides" -ForegroundColor Yellow
            }
        }
        else {
            $concoursInvalides++
            Write-Host "    ‚ö† $($concour.nom): Dates manquantes" -ForegroundColor Yellow
        }
    }

    Write-Host "    üìä R√©sum√© dates: $concoursOuverts ouverts, $concoursFermes ferm√©s, $concoursInvalides invalides" -ForegroundColor Cyan
    
    if ($concoursOuverts -eq 0) {
        $errors += "Aucun concours ouvert aux candidatures"
        Write-Host "    üí° SOLUTION: Mettre √† jour les dates des concours dans la base de donn√©es" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "  ‚úó Erreur lors de la v√©rification des donn√©es de test" -ForegroundColor Red
    Write-Host "    D√©tail: $($_.Exception.Message)" -ForegroundColor Red
    $errors += "Donn√©es de test non accessibles - $($_.Exception.Message)"
}

# Test des mots de passe BCrypt
Write-Host "V√©rification du syst√®me de mots de passe BCrypt..." -ForegroundColor White
try {
    # Test avec diff√©rents comptes pour v√©rifier BCrypt
    $testUsers = @(
        @{email = "admin@test.com"; password = "1234"; role = "Admin" },
        @{email = "h.alami@mf.gov.ma"; password = "1234"; role = "Gestionnaire Local" },
        @{email = "m.chraibi@mf.gov.ma"; password = "1234"; role = "Gestionnaire Global" }
    )
    
    $bcryptSuccess = 0
    foreach ($user in $testUsers) {
        try {
            $body = @{
                email    = $user.email
                password = $user.password
            } | ConvertTo-Json

            $response = Invoke-WebRequest "http://localhost:8080/api/auth/login" -Method POST -Body $body -ContentType "application/json" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
            
            if ($response.StatusCode -eq 200) {
                $bcryptSuccess++
                Write-Host "    ‚úì BCrypt OK pour $($user.role): $($user.email)" -ForegroundColor Green
            }
        }
        catch {
            Write-Host "    ‚úó √âchec BCrypt pour $($user.email)" -ForegroundColor Red
        }
    }
    
    if ($bcryptSuccess -eq $testUsers.Count) {
        Write-Host "  ‚úì Syst√®me BCrypt fonctionnel pour tous les comptes" -ForegroundColor Green
        $successes += "Authentification BCrypt fonctionnelle"
    }
    elseif ($bcryptSuccess -gt 0) {
        Write-Host "  ‚ö† BCrypt partiellement fonctionnel ($bcryptSuccess/$($testUsers.Count))" -ForegroundColor Yellow
        $warnings += "BCrypt partiellement fonctionnel"
    }
    else {
        Write-Host "  ‚úó Aucun compte BCrypt ne fonctionne" -ForegroundColor Red
        $errors += "Syst√®me BCrypt d√©faillant"
    }
}
catch {
    Write-Host "  ‚úó Erreur lors du test BCrypt" -ForegroundColor Red
    $errors += "Test BCrypt √©chou√© - $($_.Exception.Message)"
}

# ========================================
# 10. TESTS FONCTIONNELS AVANCES
# ========================================
Write-Host ""
Write-Host "10. TESTS FONCTIONNELS AVANCES" -ForegroundColor Yellow
Write-Host "===============================" -ForegroundColor Yellow

# Test de validation/rejet de candidatures
Write-Host "Test des fonctions de validation/rejet de candidatures..." -ForegroundColor White
try {
    # Se connecter d'abord comme gestionnaire
    $loginBody = @{
        email    = "h.alami@mf.gov.ma"
        password = "1234"
    } | ConvertTo-Json

    $session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
    $loginResponse = Invoke-WebRequest "http://localhost:8080/api/auth/login" -Method POST -Body $loginBody -ContentType "application/json" -UseBasicParsing -TimeoutSec 5 -WebSession $session -ErrorAction Stop
    
    if ($loginResponse.StatusCode -eq 200) {
        # Test des candidatures pour un centre
        $candidaturesResponse = Invoke-WebRequest "http://localhost:8080/api/candidatures/centre/1" -UseBasicParsing -TimeoutSec 5 -WebSession $session -ErrorAction Stop
        Write-Host "  ‚úì API gestion candidatures accessible" -ForegroundColor Green
        $successes += "Syst√®me de gestion des candidatures fonctionnel"
        
        # Test des endpoints de validation (structure)
        $data = $candidaturesResponse.Content | ConvertFrom-Json
        Write-Host "    Candidatures trouv√©es: $($data.Count)" -ForegroundColor Cyan
    }
    else {
        Write-Host "  ‚úó Connexion gestionnaire √©chou√©e" -ForegroundColor Red
        $errors += "Connexion gestionnaire pour tests fonctionnels √©chou√©e"
    }
}
catch {
    Write-Host "  ‚ö† Tests validation/rejet non disponibles (n√©cessite candidatures existantes)" -ForegroundColor Yellow
    $warnings += "Tests validation/rejet non testables - $($_.Exception.Message)"
}

# Test du syst√®me de notifications
Write-Host "Test du syst√®me de notifications..." -ForegroundColor White
try {
    # Test de l'endpoint de test des notifications
    $response = Invoke-WebRequest "http://localhost:8080/api/notifications/test" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $testData = $response.Content | ConvertFrom-Json
    
    if ($testData.status -eq "OK") {
        Write-Host "  ‚úì API notifications op√©rationnelle" -ForegroundColor Green
        Write-Host "    Total notifications: $($testData.total_notifications)" -ForegroundColor Cyan
        $successes += "Syst√®me de notifications op√©rationnel"
        
        # Test des statistiques de notifications
        try {
            $statsResponse = Invoke-WebRequest "http://localhost:8080/api/notifications/statistiques" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
            $stats = $statsResponse.Content | ConvertFrom-Json
            Write-Host "    ‚úì Statistiques notifications disponibles" -ForegroundColor Green
            Write-Host "      - Total: $($stats.total), Envoy√©es: $($stats.envoyees), √âchec: $($stats.echec)" -ForegroundColor Cyan
        }
        catch {
            Write-Host "    ‚ö† Statistiques notifications non disponibles" -ForegroundColor Yellow
        }
    }
    else {
        Write-Host "  ‚ö† Syst√®me notifications avec erreurs" -ForegroundColor Yellow
        $warnings += "Syst√®me notifications avec probl√®mes"
    }
}
catch {
    if ($_.Exception.Response.StatusCode -eq 404) {
        Write-Host "  ‚ö† Endpoint notifications non trouv√© (peut √™tre normal)" -ForegroundColor Yellow
        $warnings += "Endpoint notifications non impl√©ment√©"
    }
    else {
        Write-Host "  ‚ö† Syst√®me notifications non accessible" -ForegroundColor Yellow
        $warnings += "Syst√®me notifications non testable - $($_.Exception.Message)"
    }
}

# Test des logs d'actions
Write-Host "Test du syst√®me de logs d'actions..." -ForegroundColor White
try {
    # Test de l'endpoint de test des logs
    $response = Invoke-WebRequest "http://localhost:8080/api/logs/test" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $testData = $response.Content | ConvertFrom-Json
    
    if ($testData.status -eq "OK") {
        Write-Host "  ‚úì API logs d'actions op√©rationnelle" -ForegroundColor Green
        Write-Host "    Total logs: $($testData.total_logs)" -ForegroundColor Cyan
        $successes += "Syst√®me de logs d'actions fonctionnel"
        
        # Test des statistiques de logs
        try {
            $statsResponse = Invoke-WebRequest "http://localhost:8080/api/logs/statistiques" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
            $stats = $statsResponse.Content | ConvertFrom-Json
            Write-Host "    ‚úì Statistiques logs disponibles" -ForegroundColor Green
            Write-Host "      - Total: $($stats.total), Candidats: $($stats.candidats), Utilisateurs: $($stats.utilisateurs), Syst√®me: $($stats.systeme)" -ForegroundColor Cyan
        }
        catch {
            Write-Host "    ‚ö† Statistiques logs non disponibles" -ForegroundColor Yellow
        }
        
        # Test des logs r√©cents
        try {
            $recentResponse = Invoke-WebRequest "http://localhost:8080/api/logs/recent" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
            $recentLogs = $recentResponse.Content | ConvertFrom-Json
            Write-Host "    ‚úì Logs r√©cents disponibles ($($recentLogs.Count) entr√©es)" -ForegroundColor Green
        }
        catch {
            Write-Host "    ‚ö† Logs r√©cents non disponibles" -ForegroundColor Yellow
        }
    }
    else {
        Write-Host "  ‚ö† Syst√®me logs avec erreurs" -ForegroundColor Yellow
        $warnings += "Syst√®me logs avec probl√®mes"
    }
}
catch {
    if ($_.Exception.Response.StatusCode -eq 404) {
        Write-Host "  ‚ö† Endpoint logs non trouv√© (peut √™tre normal)" -ForegroundColor Yellow
        $warnings += "Endpoint logs non impl√©ment√©"
    }
    else {
        Write-Host "  ‚ö† Syst√®me logs non accessible" -ForegroundColor Yellow
        $warnings += "Syst√®me logs non testable - $($_.Exception.Message)"
    }
}

# Test des statistiques
Write-Host "Test des API de statistiques..." -ForegroundColor White
try {
    # Test des statistiques g√©n√©rales
    $response = Invoke-WebRequest "http://localhost:8080/api/candidatures/statistiques/globales" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    Write-Host "  ‚úì API statistiques accessible" -ForegroundColor Green
    $successes += "Syst√®me de statistiques fonctionnel"
    
    # Test des statistiques par centre
    try {
        $responseCentre = Invoke-WebRequest "http://localhost:8080/api/candidatures/statistiques/centre/1" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        Write-Host "    ‚úì Statistiques par centre disponibles" -ForegroundColor Green
        Write-Host "    Statut de r√©ponse: $($responseCentre.StatusCode)" -ForegroundColor Cyan
    }
    catch {
        Write-Host "    ‚ö† Statistiques par centre non accessibles" -ForegroundColor Yellow
    }
}
catch {
    if ($_.Exception.Response.StatusCode -eq 404) {
        Write-Host "  ‚ö† Endpoint statistiques non trouv√© (peut √™tre normal)" -ForegroundColor Yellow
        $warnings += "Endpoint statistiques non impl√©ment√©"
    }
    else {
        Write-Host "  ‚ö† Syst√®me statistiques non accessible" -ForegroundColor Yellow
        $warnings += "Syst√®me statistiques non testable - $($_.Exception.Message)"
    }
}

# ========================================
# 11. TESTS COMMUNICATION FRONTEND-BACKEND
# ========================================
Write-Host ""
Write-Host "11. TESTS COMMUNICATION FRONTEND-BACKEND" -ForegroundColor Yellow
Write-Host "=========================================" -ForegroundColor Yellow

# Test CORS
Write-Host "Test de la configuration CORS..." -ForegroundColor White
try {
    $headers = @{
        'Origin'                        = 'http://localhost:3000'
        'Access-Control-Request-Method' = 'GET'
    }
    
    $corsResponse = Invoke-WebRequest "http://localhost:8080/api/health" -Headers $headers -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $corsHeader = $corsResponse.Headers.'Access-Control-Allow-Origin'
    
    if ($corsHeader -contains 'http://localhost:3000' -or $corsHeader -contains '*') {
        Write-Host "  ‚úì CORS correctement configur√©" -ForegroundColor Green
        $successes += "Configuration CORS fonctionnelle"
    }
    else {
        Write-Host "  ‚ö† CORS peut ne pas √™tre configur√© pour localhost:3000" -ForegroundColor Yellow
        $warnings += "Configuration CORS incertaine"
    }
}
catch {
    Write-Host "  ‚ö† Test CORS non concluant" -ForegroundColor Yellow
    $warnings += "Test CORS non r√©alisable - $($_.Exception.Message)"
}

# Test des appels API depuis le frontend (simulation)
Write-Host "Test de la connectivit√© API pour le frontend..." -ForegroundColor White
try {
    # Simuler les appels que ferait le frontend
    $frontendAPIs = @(
        @{name = "Liste Concours"; url = "http://localhost:8080/api/concours" },
        @{name = "Liste Centres"; url = "http://localhost:8080/api/centres" },
        @{name = "Liste Sp√©cialit√©s"; url = "http://localhost:8080/api/specialites" }
    )
    
    $apiSuccess = 0
    foreach ($api in $frontendAPIs) {
        try {
            $headers = @{'Origin' = 'http://localhost:3000' }
            $response = Invoke-WebRequest $api.url -Headers $headers -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
            if ($response.StatusCode -eq 200) {
                $apiSuccess++
                Write-Host "    ‚úì $($api.name) accessible depuis frontend" -ForegroundColor Green
            }
        }
        catch {
            Write-Host "    ‚úó $($api.name) non accessible" -ForegroundColor Red
        }
    }
    
    if ($apiSuccess -eq $frontendAPIs.Count) {
        Write-Host "  ‚úì Toutes les API essentielles accessibles au frontend" -ForegroundColor Green
        $successes += "APIs frontend-backend fonctionnelles"
    }
    else {
        Write-Host "  ‚ö† Certaines API ne sont pas accessibles ($apiSuccess/$($frontendAPIs.Count))" -ForegroundColor Yellow
        $warnings += "Connectivit√© API partielle"
    }
}
catch {
    Write-Host "  ‚úó Erreur lors du test des API frontend" -ForegroundColor Red
    $errors += "Test API frontend √©chou√© - $($_.Exception.Message)"
}

# Test de la session utilisateur
Write-Host "Test de la gestion des sessions utilisateur..." -ForegroundColor White
try {
    # Test de session avec cookies
    $session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
    
    # 1. Connexion
    $loginBody = @{
        email    = "admin@test.com"
        password = "1234"
    } | ConvertTo-Json

    $loginResponse = Invoke-WebRequest "http://localhost:8080/api/auth/login" -Method POST -Body $loginBody -ContentType "application/json" -UseBasicParsing -TimeoutSec 5 -WebSession $session -ErrorAction Stop
    
    if ($loginResponse.StatusCode -eq 200) {
        # 2. Test utilisateur actuel avec session
        $currentUserResponse = Invoke-WebRequest "http://localhost:8080/api/auth/current" -UseBasicParsing -TimeoutSec 5 -WebSession $session -ErrorAction Stop
        
        if ($currentUserResponse.StatusCode -eq 200) {
            Write-Host "  ‚úì Session utilisateur fonctionnelle" -ForegroundColor Green
            $successes += "Gestion des sessions utilisateur op√©rationnelle"
            
            # 3. Test d√©connexion
            $logoutResponse = Invoke-WebRequest "http://localhost:8080/api/auth/logout" -Method POST -UseBasicParsing -TimeoutSec 5 -WebSession $session -ErrorAction Stop
            
            if ($logoutResponse.StatusCode -eq 200) {
                Write-Host "    ‚úì D√©connexion fonctionnelle" -ForegroundColor Green
            }
        }
        else {
            Write-Host "  ‚ö† Session utilisateur partiellement fonctionnelle" -ForegroundColor Yellow
            $warnings += "Session utilisateur incompl√®te"
        }
    }
    else {
        Write-Host "  ‚úó Connexion pour test de session √©chou√©e" -ForegroundColor Red
        $errors += "Test session utilisateur √©chou√©"
    }
}
catch {
    Write-Host "  ‚úó Erreur lors du test des sessions" -ForegroundColor Red
    $errors += "Test session utilisateur √©chou√© - $($_.Exception.Message)"
}

# Test int√©gration compl√®te Frontend-Backend
Write-Host "Test d'int√©gration compl√®te Frontend-Backend..." -ForegroundColor White
try {
    # V√©rifier que le frontend peut charger les ressources du backend
    if ($port3000 -and $port8080) {
        # Simuler une s√©quence typique d'utilisation
        $headers = @{
            'Origin'  = 'http://localhost:3000'
            'Referer' = 'http://localhost:3000/'
        }
        
        # 1. Frontend charge la liste des concours
        $concoursResp = Invoke-WebRequest "http://localhost:8080/api/concours" -Headers $headers -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        
        # 2. Frontend charge la liste des centres
        $centresResp = Invoke-WebRequest "http://localhost:8080/api/centres" -Headers $headers -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        
        if ($concoursResp.StatusCode -eq 200 -and $centresResp.StatusCode -eq 200) {
            Write-Host "  ‚úì Int√©gration Frontend-Backend fonctionnelle" -ForegroundColor Green
            $successes += "Int√©gration compl√®te Frontend-Backend op√©rationnelle"
        }
        else {
            Write-Host "  ‚ö† Int√©gration Frontend-Backend partielle" -ForegroundColor Yellow
            $warnings += "Int√©gration Frontend-Backend incompl√®te"
        }
    }
    else {
        Write-Host "  ‚ö† Frontend ou Backend non d√©marr√© pour test d'int√©gration" -ForegroundColor Yellow
        $warnings += "Test int√©gration impossible - services non d√©marr√©s"
    }
}
catch {
    Write-Host "  ‚úó Erreur lors du test d'int√©gration" -ForegroundColor Red
    $errors += "Test int√©gration Frontend-Backend √©chou√© - $($_.Exception.Message)"
}

# ========================================
# 12. DIAGNOSTIC SP√âCIFIQUE AFFICHAGE POSTES
# ========================================
Write-Host ""
Write-Host "12. DIAGNOSTIC SP√âCIFIQUE AFFICHAGE POSTES" -ForegroundColor Yellow
Write-Host "===========================================" -ForegroundColor Yellow

Write-Host "üîç Diagnostic approfondi pour l'affichage des postes disponibles..." -ForegroundColor White

# Test de la s√©quence compl√®te du frontend
Write-Host "Test de la s√©quence compl√®te frontend PostesPage..." -ForegroundColor White
try {
    # 1. Simuler le chargement initial de PostesPage
    Write-Host "  üì• 1. Chargement des donn√©es initiales..." -ForegroundColor Cyan
    
    $headers = @{
        'Origin'  = 'http://localhost:3000'
        'Referer' = 'http://localhost:3000/postes'
        'Accept'  = 'application/json'
    }
    
    # Appels parall√®les comme dans PostesPage.js
    Write-Host "    - Chargement concours..." -ForegroundColor Gray
    $concoursResp = Invoke-WebRequest "http://localhost:8080/api/concours" -Headers $headers -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
    $concoursData = $concoursResp.Content | ConvertFrom-Json
    
    Write-Host "    - Chargement centres..." -ForegroundColor Gray
    $centresResp = Invoke-WebRequest "http://localhost:8080/api/centres" -Headers $headers -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
    $centresData = $centresResp.Content | ConvertFrom-Json
    
    Write-Host "    - Chargement sp√©cialit√©s..." -ForegroundColor Gray
    $specialitesResp = Invoke-WebRequest "http://localhost:8080/api/specialites" -Headers $headers -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
    $specialitesData = $specialitesResp.Content | ConvertFrom-Json
    
    # V√©rification des donn√©es re√ßues
    Write-Host "  üìä 2. V√©rification des donn√©es re√ßues..." -ForegroundColor Cyan
    
    if ($concoursData -and ($concoursData -is [Array]) -and $concoursData.Count -gt 0) {
        Write-Host "    ‚úì Concours: $($concoursData.Count) √©l√©ments re√ßus" -ForegroundColor Green
        Write-Host "      Structure du premier concours:" -ForegroundColor Gray
        $premier = $concoursData[0]
        Write-Host "        - id: $($premier.id)" -ForegroundColor Gray
        Write-Host "        - nom: $($premier.nom)" -ForegroundColor Gray
        Write-Host "        - actif: $($premier.actif)" -ForegroundColor Gray
        Write-Host "        - dateDebutCandidature: $($premier.dateDebutCandidature)" -ForegroundColor Gray
        Write-Host "        - dateFinCandidature: $($premier.dateFinCandidature)" -ForegroundColor Gray
    }
    else {
        Write-Host "    ‚úó Concours: Donn√©es invalides ou vides" -ForegroundColor Red
        $errors += "API concours retourne des donn√©es invalides pour PostesPage"
    }
    
    if ($centresData -and ($centresData -is [Array]) -and $centresData.Count -gt 0) {
        Write-Host "    ‚úì Centres: $($centresData.Count) √©l√©ments re√ßus" -ForegroundColor Green
    }
    else {
        Write-Host "    ‚úó Centres: Donn√©es invalides ou vides" -ForegroundColor Red
        $errors += "API centres retourne des donn√©es invalides pour PostesPage"
    }
    
    if ($specialitesData -and ($specialitesData -is [Array]) -and $specialitesData.Count -gt 0) {
        Write-Host "    ‚úì Sp√©cialit√©s: $($specialitesData.Count) √©l√©ments re√ßus" -ForegroundColor Green
    }
    else {
        Write-Host "    ‚úó Sp√©cialit√©s: Donn√©es invalides ou vides" -ForegroundColor Red
        $errors += "API sp√©cialit√©s retourne des donn√©es invalides pour PostesPage"
    }
    
    # 3. Test des filtres comme dans PostesPage
    Write-Host "  üîç 3. Test des fonctions de filtrage..." -ForegroundColor Cyan
    
    $concoursActifs = $concoursData | Where-Object { $_.actif -eq $true }
    Write-Host "    - Concours actifs: $($concoursActifs.Count)/$($concoursData.Count)" -ForegroundColor Gray
    
    if ($concoursActifs.Count -eq 0) {
        Write-Host "    ‚úó Aucun concours actif trouv√©" -ForegroundColor Red
        $errors += "Aucun concours n'est marqu√© comme actif dans la base"
    }
    
    # Test des dates des concours
    $dateActuelle = Get-Date
    $concoursOuverts = 0
    $concoursDetails = @()
    
    foreach ($concours in $concoursActifs) {
        $statut = "INVALIDE"
        $couleur = "Red"
        
        if ($concours.dateDebutCandidature -and $concours.dateFinCandidature) {
            try {
                $dateDebut = [DateTime]::Parse($concours.dateDebutCandidature)
                $dateFin = [DateTime]::Parse($concours.dateFinCandidature)
                
                if ($dateActuelle -ge $dateDebut -and $dateActuelle -le $dateFin) {
                    $statut = "OUVERT"
                    $couleur = "Green"
                    $concoursOuverts++
                }
                elseif ($dateActuelle -lt $dateDebut) {
                    $statut = "FUTUR"
                    $couleur = "Yellow"
                }
                else {
                    $statut = "FERM√â"
                    $couleur = "Red"
                }
                
                $joursRestants = ($dateFin - $dateActuelle).Days
                $concoursDetails += @{
                    nom           = $concours.nom
                    statut        = $statut
                    joursRestants = $joursRestants
                    dateDebut     = $dateDebut.ToString("dd/MM/yyyy")
                    dateFin       = $dateFin.ToString("dd/MM/yyyy")
                }
                
                Write-Host "      - $($concours.nom): $statut ($joursRestants jours)" -ForegroundColor $couleur
            }
            catch {
                Write-Host "      - $($concours.nom): Dates invalides" -ForegroundColor Red
                $concoursDetails += @{
                    nom    = $concours.nom
                    statut = "DATES_INVALIDES"
                    erreur = $_.Exception.Message
                }
            }
        }
        else {
            Write-Host "      - $($concours.nom): Dates manquantes" -ForegroundColor Red
            $concoursDetails += @{
                nom    = $concours.nom
                statut = "DATES_MANQUANTES"
            }
        }
    }
    
    Write-Host "    üìä R√©sum√©: $concoursOuverts concours ouverts sur $($concoursActifs.Count) actifs" -ForegroundColor Cyan
    
    # 4. Test des relations concours-sp√©cialit√©s-centres
    Write-Host "  üîó 4. Test des relations concours-sp√©cialit√©s-centres..." -ForegroundColor Cyan
    
    if ($concoursOuverts -gt 0) {
        $concoursOuvert = ($concoursActifs | Where-Object { 
                try {
                    $dateDebut = [DateTime]::Parse($_.dateDebutCandidature)
                    $dateFin = [DateTime]::Parse($_.dateFinCandidature)
                    $dateActuelle -ge $dateDebut -and $dateActuelle -le $dateFin
                }
                catch {
                    $false
                }
            })[0]
        
        if ($concoursOuvert) {
            Write-Host "    Test avec concours: $($concoursOuvert.nom)" -ForegroundColor Gray
            
            # Test des sp√©cialit√©s pour ce concours
            try {
                $specialitesConcours = Invoke-WebRequest "http://localhost:8080/api/concours/$($concoursOuvert.id)/specialites" -Headers $headers -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
                $specialitesConcoursData = $specialitesConcours.Content | ConvertFrom-Json
                
                if ($specialitesConcoursData -and $specialitesConcoursData.Count -gt 0) {
                    Write-Host "      ‚úì Sp√©cialit√©s disponibles pour ce concours: $($specialitesConcoursData.Count)" -ForegroundColor Green
                }
                else {
                    Write-Host "      ‚úó Aucune sp√©cialit√© li√©e √† ce concours" -ForegroundColor Red
                    $errors += "Concours $($concoursOuvert.nom) n'a aucune sp√©cialit√© associ√©e"
                }
            }
            catch {
                Write-Host "      ‚ö† Impossible de r√©cup√©rer les sp√©cialit√©s du concours" -ForegroundColor Yellow
                $warnings += "Endpoint sp√©cialit√©s par concours non disponible"
            }
            
            # Test des centres pour une sp√©cialit√©
            if ($specialitesData.Count -gt 0) {
                $premiereSpecialite = $specialitesData[0]
                try {
                    $centresSpecialite = Invoke-WebRequest "http://localhost:8080/api/specialites/$($premiereSpecialite.id)/centres" -Headers $headers -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
                    $centresSpecialiteData = $centresSpecialite.Content | ConvertFrom-Json
                    
                    if ($centresSpecialiteData -and $centresSpecialiteData.Count -gt 0) {
                        Write-Host "      ‚úì Centres disponibles pour $($premiereSpecialite.nom): $($centresSpecialiteData.Count)" -ForegroundColor Green
                        $successes += "Relations concours-sp√©cialit√©s-centres fonctionnelles"
                    }
                    else {
                        Write-Host "      ‚úó Aucun centre pour $($premiereSpecialite.nom)" -ForegroundColor Red
                        $errors += "Sp√©cialit√© $($premiereSpecialite.nom) n'a aucun centre associ√©"
                    }
                }
                catch {
                    Write-Host "      ‚ö† Impossible de r√©cup√©rer les centres de la sp√©cialit√©" -ForegroundColor Yellow
                    $warnings += "Endpoint centres par sp√©cialit√© non disponible"
                }
            }
        }
    }
    else {
        Write-Host "      ‚ö† Aucun concours ouvert pour tester les relations" -ForegroundColor Yellow
        $warnings += "Impossible de tester les relations car aucun concours ouvert"
    }
    
    # 5. Test de simulation d'un clic sur "Candidater"
    Write-Host "  üëÜ 5. Simulation du clic 'Candidater'..." -ForegroundColor Cyan
    
    if ($concoursOuverts -gt 0 -and $centresData.Count -gt 0 -and $specialitesData.Count -gt 0) {
        Write-Host "    ‚úì Donn√©es suffisantes pour navigation vers /candidature" -ForegroundColor Green
        Write-Host "      - Concours disponibles: $concoursOuverts" -ForegroundColor Gray
        Write-Host "      - Centres disponibles: $($centresData.Count)" -ForegroundColor Gray
        Write-Host "      - Sp√©cialit√©s disponibles: $($specialitesData.Count)" -ForegroundColor Gray
        $successes += "Navigation PostesPage ‚Üí CandidaturePage possible"
    }
    else {
        Write-Host "    ‚úó Donn√©es insuffisantes pour la navigation" -ForegroundColor Red
        $errors += "Impossible de naviguer vers la page de candidature depuis PostesPage"
    }
    
    # 6. Diagnostic de l'√©tat de l'interface utilisateur
    Write-Host "  üñ•Ô∏è 6. Diagnostic interface utilisateur..." -ForegroundColor Cyan
    
    if ($concoursData.Count -eq 0) {
        Write-Host "    ‚úó PROBL√àME: Aucun concours √† afficher" -ForegroundColor Red
        Write-Host "      üí° Solution: V√©rifier insert_test_data.sql" -ForegroundColor Yellow
    }
    elseif ($concoursActifs.Count -eq 0) {
        Write-Host "    ‚úó PROBL√àME: Aucun concours actif" -ForegroundColor Red
        Write-Host "      üí° Solution: Mettre actif=true dans la table Concours" -ForegroundColor Yellow
    }
    elseif ($concoursOuverts -eq 0) {
        Write-Host "    ‚úó PROBL√àME: Aucun concours ouvert aux candidatures" -ForegroundColor Red
        Write-Host "      üí° Solution: Mettre √† jour les dates dans la table Concours" -ForegroundColor Yellow
        Write-Host "      üìÖ Dates actuelles des concours actifs:" -ForegroundColor Yellow
        foreach ($detail in $concoursDetails) {
            if ($detail.dateDebut) {
                Write-Host "        - $($detail.nom): $($detail.dateDebut) ‚Üí $($detail.dateFin) ($($detail.statut))" -ForegroundColor Gray
            }
            else {
                Write-Host "        - $($detail.nom): $($detail.statut)" -ForegroundColor Gray
            }
        }
    }
    else {
        Write-Host "    ‚úì Interface devrait afficher $concoursOuverts concours disponibles" -ForegroundColor Green
        $successes += "PostesPage devrait afficher correctement les concours"
    }

}
catch {
    Write-Host "  ‚úó Erreur lors du diagnostic PostesPage" -ForegroundColor Red
    Write-Host "    D√©tail: $($_.Exception.Message)" -ForegroundColor Red
    $errors += "Diagnostic PostesPage √©chou√© - $($_.Exception.Message)"
}

# Test sp√©cifique des erreurs JavaScript frontend
Write-Host ""
Write-Host "üåê Test des erreurs potentielles c√¥t√© frontend..." -ForegroundColor White
try {
    if ($port3000) {
        # Test si le frontend charge correctement
        $frontendResp = Invoke-WebRequest "http://localhost:3000/postes" -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
        
        if ($frontendResp.StatusCode -eq 200) {
            Write-Host "  ‚úì Page /postes accessible" -ForegroundColor Green
            
            # V√©rifier les console errors dans le contenu HTML
            $content = $frontendResp.Content
            if ($content -like "*React*" -and $content -like "*root*") {
                Write-Host "  ‚úì Application React charg√©e" -ForegroundColor Green
                $successes += "Frontend PostesPage accessible et React actif"
            }
            else {
                Write-Host "  ‚ö† Page charg√©e mais React peut ne pas √™tre actif" -ForegroundColor Yellow
                $warnings += "React peut ne pas √™tre correctement initialis√©"
            }
        }
    }
    else {
        Write-Host "  ‚ö† Frontend non d√©marr√©, impossible de tester /postes" -ForegroundColor Yellow
        $warnings += "Frontend non accessible pour test PostesPage"
    }
}
catch {
    Write-Host "  ‚úó Erreur lors de l'acc√®s √† /postes" -ForegroundColor Red
    $errors += "Page /postes inaccessible - $($_.Exception.Message)"
}

# ========================================
# 13. V√âRIFICATION SCRIPTS SQL ET BASE DE DONN√âES
# ========================================
Write-Host ""
Write-Host "13. V√âRIFICATION SCRIPTS SQL ET BASE DE DONN√âES" -ForegroundColor Yellow
Write-Host "================================================" -ForegroundColor Yellow

Write-Host "üóÑÔ∏è V√©rification de l'ex√©cution des scripts SQL..." -ForegroundColor White

# V√©rifier si insert_test_data.sql a √©t√© ex√©cut√©
try {
    # Test de pr√©sence de donn√©es sp√©cifiques du script de test
    $testResponse = Invoke-WebRequest "http://localhost:8080/api/test/health" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
    $testData = $testResponse.Content | ConvertFrom-Json
    
    Write-Host "  üìä √âtat de la base de donn√©es:" -ForegroundColor Cyan
    Write-Host "    - Utilisateurs: $($testData.nombre_utilisateurs)" -ForegroundColor Gray
    Write-Host "    - Candidats: $($testData.nombre_candidats)" -ForegroundColor Gray
    
    if ($testData.nombre_utilisateurs -ge 3) {
        Write-Host "  ‚úì Utilisateurs de test pr√©sents" -ForegroundColor Green
        $successes += "Utilisateurs de test charg√©s dans la base"
    }
    else {
        Write-Host "  ‚ö† Peu d'utilisateurs de test ($($testData.nombre_utilisateurs))" -ForegroundColor Yellow
        $warnings += "Script insert_test_data.sql possiblement non ex√©cut√© compl√®tement"
    }
    
    # V√©rifier les centres avec des noms sp√©cifiques du script de test
    $centres = (Invoke-WebRequest "http://localhost:8080/api/centres" -UseBasicParsing -TimeoutSec 5).Content | ConvertFrom-Json
    $centresTEST = $centres | Where-Object { $_.nom -like "*Rabat*" -or $_.nom -like "*Casablanca*" -or $_.nom -like "*Marrakech*" }
    
    if ($centresTEST.Count -ge 3) {
        Write-Host "  ‚úì Centres de test sp√©cifiques trouv√©s ($($centresTEST.Count))" -ForegroundColor Green
        $successes += "Centres de test du script SQL pr√©sents"
    }
    else {
        Write-Host "  ‚ö† Centres de test manquants ou incorrects" -ForegroundColor Yellow
        $warnings += "Script centres possiblement non ex√©cut√© ou modifi√©"
        
        Write-Host "    Centres trouv√©s:" -ForegroundColor Gray
        foreach ($centre in $centres) {
            Write-Host "      - $($centre.nom) ($($centre.ville))" -ForegroundColor Gray
        }
    }

}
catch {
    Write-Host "  ‚úó Impossible de v√©rifier l'√©tat de la base de donn√©es" -ForegroundColor Red
    $errors += "√âtat de la base de donn√©es non v√©rifiable - $($_.Exception.Message)"
}

# V√©rifier les fichiers SQL
Write-Host "  üìÅ V√©rification des fichiers SQL..." -ForegroundColor Cyan
$scriptSQL = "insert_test_data.sql"
if (Test-Path $scriptSQL) {
    Write-Host "    ‚úì Script $scriptSQL trouv√©" -ForegroundColor Green
    
    # Lire les premi√®res lignes pour v√©rifier le contenu
    $contenuSQL = Get-Content $scriptSQL -TotalCount 20
    if ($contenuSQL -join "`n" -like "*USE candidature_plus*") {
        Write-Host "    ‚úì Script contient les instructions pour candidature_plus" -ForegroundColor Green
        $successes += "Script SQL de test disponible et correct"
    }
    else {
        Write-Host "    ‚ö† Script peut ne pas cibler la bonne base de donn√©es" -ForegroundColor Yellow
        $warnings += "Script SQL possiblement incorrect"
    }
}
else {
    Write-Host "    ‚úó Script $scriptSQL non trouv√©" -ForegroundColor Red
    $errors += "Script de donn√©es de test manquant"
    
    Write-Host "    üí° Solution: Cr√©er ou restaurer le fichier insert_test_data.sql" -ForegroundColor Yellow
}

# ========================================
Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "           RESUME DU DIAGNOSTIC" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

Write-Host ""
Write-Host "SUCC√àS ($($successes.Count)):" -ForegroundColor Green
foreach ($success in $successes) {
    Write-Host "  ‚úì $success" -ForegroundColor Green
}

Write-Host ""
Write-Host "AVERTISSEMENTS ($($warnings.Count)):" -ForegroundColor Yellow
foreach ($warning in $warnings) {
    Write-Host "  ‚ö† $warning" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "ERREURS ($($errors.Count)):" -ForegroundColor Red
foreach ($errorItem in $errors) {
    Write-Host "  ‚úó $errorItem" -ForegroundColor Red
}

# ========================================
# DIAGNOSTIC SP√âCIFIQUE POSTES DISPONIBLES
# ========================================
Write-Host ""
Write-Host "üéØ DIAGNOSTIC SP√âCIFIQUE: POSTES NON VISIBLES" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

$problemesPostes = @()
$solutionsPostes = @()

# Analyser les probl√®mes sp√©cifiques aux postes
if ($errors -contains "Centres de test absents" -or $errors -contains "Concours de test absents" -or $errors -contains "Sp√©cialit√©s de test absentes") {
    $problemesPostes += "DONN√âES DE BASE MANQUANTES"
    $solutionsPostes += "1. Ex√©cuter le script insert_test_data.sql dans MySQL"
    $solutionsPostes += "   - Ouvrir MySQL Workbench ou ligne de commande MySQL"
    $solutionsPostes += "   - Ex√©cuter: SOURCE insert_test_data.sql;"
}

if ($errors -contains "Aucun concours n'est marqu√© comme actif dans la base") {
    $problemesPostes += "CONCOURS INACTIFS"
    $solutionsPostes += "2. Activer les concours dans la base de donn√©es"
    $solutionsPostes += "   - UPDATE Concours SET actif = true WHERE actif = false;"
}

if ($errors -contains "Aucun concours ouvert aux candidatures") {
    $problemesPostes += "DATES DE CONCOURS EXPIR√âES"
    $solutionsPostes += "3. Mettre √† jour les dates des concours"
    $solutionsPostes += "   - UPDATE Concours SET dateDebutCandidature = CURDATE(),"
    $solutionsPostes += "     dateFinCandidature = DATE_ADD(CURDATE(), INTERVAL 30 DAY)"
    $solutionsPostes += "     WHERE actif = true;"
}

if ($errors -like "*Liaisons*concours-sp√©cialit√©s*" -or $errors -like "*Liaisons*centre-sp√©cialit√©s*") {
    $problemesPostes += "RELATIONS ENTRE ENTIT√âS MANQUANTES"
    $solutionsPostes += "4. V√©rifier les tables de liaison"
    $solutionsPostes += "   - Table Concours_Specialite doit avoir des donn√©es"
    $solutionsPostes += "   - Table Centre_Specialite doit avoir des donn√©es"
}

if ($errors -contains "API concours retourne des donn√©es invalides pour PostesPage" -or 
    $errors -contains "API centres retourne des donn√©es invalides pour PostesPage" -or 
    $errors -contains "API sp√©cialit√©s retourne des donn√©es invalides pour PostesPage") {
    $problemesPostes += "R√âPONSES API INVALIDES"
    $solutionsPostes += "5. V√©rifier la configuration des endpoints REST"
    $solutionsPostes += "   - Endpoints /api/concours, /api/centres, /api/specialites"
    $solutionsPostes += "   - V√©rifier les annotations @JsonIgnore/@JsonInclude"
}

if ($problemesPostes.Count -gt 0) {
    Write-Host ""
    Write-Host "üìã PROBL√àMES IDENTIFI√âS:" -ForegroundColor Red
    foreach ($probleme in $problemesPostes) {
        Write-Host "  ‚ùå $probleme" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üîß SOLUTIONS RECOMMAND√âES:" -ForegroundColor Green
    foreach ($solution in $solutionsPostes) {
        if ($solution -like "*. *") {
            Write-Host "  $solution" -ForegroundColor Yellow
        }
        else {
            Write-Host "     $solution" -ForegroundColor Gray
        }
    }
    
    Write-Host ""
    Write-Host "üöÄ ACTIONS IMM√âDIATES √Ä EFFECTUER:" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "√âTAPE 1: V√©rifier la base de donn√©es" -ForegroundColor White
    Write-Host "  mysql -u root -p candidature_plus" -ForegroundColor Gray
    Write-Host "  SELECT COUNT(*) FROM Concours WHERE actif = true;" -ForegroundColor Gray
    Write-Host "  SELECT COUNT(*) FROM Centre;" -ForegroundColor Gray
    Write-Host "  SELECT COUNT(*) FROM Specialite;" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "√âTAPE 2: Corriger les donn√©es si n√©cessaire" -ForegroundColor White
    Write-Host "  SOURCE insert_test_data.sql;" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "√âTAPE 3: Mettre √† jour les dates des concours" -ForegroundColor White
    Write-Host "  UPDATE Concours SET " -ForegroundColor Gray
    Write-Host "    dateDebutCandidature = CURDATE()," -ForegroundColor Gray  
    Write-Host "    dateFinCandidature = DATE_ADD(CURDATE(), INTERVAL 30 DAY)," -ForegroundColor Gray
    Write-Host "    actif = true" -ForegroundColor Gray
    Write-Host "  WHERE id IN (1,2,3);" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "√âTAPE 4: Red√©marrer le backend" -ForegroundColor White
    Write-Host "  stop_app.bat" -ForegroundColor Gray
    Write-Host "  start_app.bat" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "√âTAPE 5: Tester √† nouveau" -ForegroundColor White
    Write-Host "  .\diagnostic_app.ps1" -ForegroundColor Gray
    Write-Host "  Ouvrir http://localhost:3000/postes" -ForegroundColor Gray
    
}
else {
    Write-Host ""
    Write-Host "‚úÖ POSTES DISPONIBLES: DIAGNOSTIC OK" -ForegroundColor Green
    Write-Host "  Les postes devraient √™tre visibles dans l'interface." -ForegroundColor Green
    Write-Host "  Si le probl√®me persiste, v√©rifier:" -ForegroundColor White
    Write-Host "    - La console JavaScript du navigateur (F12)" -ForegroundColor Gray
    Write-Host "    - Les logs du backend Spring Boot" -ForegroundColor Gray
    Write-Host "    - La connectivit√© r√©seau entre frontend et backend" -ForegroundColor Gray
}

# ========================================
# RECOMMANDATIONS
# ========================================
Write-Host ""
Write-Host "RECOMMANDATIONS:" -ForegroundColor Cyan

if ($errors.Count -eq 0 -and $warnings.Count -eq 0) {
    Write-Host "  üéâ Tout semble fonctionner correctement!" -ForegroundColor Green
    Write-Host "  üåê Application accessible sur:" -ForegroundColor White
    Write-Host "     Frontend: http://localhost:3000" -ForegroundColor White
    Write-Host "     Backend:  http://localhost:8080" -ForegroundColor White
    Write-Host ""
    Write-Host "  üë§ Comptes de test disponibles:" -ForegroundColor White
    Write-Host "     - admin@test.com / 1234 (Administrateur)" -ForegroundColor White
    Write-Host "     - h.alami@mf.gov.ma / 1234 (Gestionnaire Local)" -ForegroundColor White
    Write-Host "     - m.chraibi@mf.gov.ma / 1234 (Gestionnaire Global)" -ForegroundColor White
    Write-Host ""
    Write-Host "  üîç Tests approfondis r√©ussis:" -ForegroundColor White
    Write-Host "     ‚úì Base de donn√©es compl√®te avec tables Log_Action et Notification" -ForegroundColor White
    Write-Host "     ‚úì Authentification BCrypt s√©curis√©e" -ForegroundColor White
    Write-Host "     ‚úì Communication Frontend-Backend avec CORS" -ForegroundColor White
    Write-Host "     ‚úì Gestion des sessions utilisateur" -ForegroundColor White
}
else {
    if ($errors -contains "Backend Spring Boot n'√©coute pas sur le port 8080") {
        Write-Host "  üîß Le backend n'est pas d√©marr√©. Lancez start_app.bat" -ForegroundColor Yellow
    }
    
    if ($warnings -contains "Frontend React n'√©coute pas sur le port 3000") {
        Write-Host "  üîß Le frontend n'est pas d√©marr√©. Lancez start_app.bat" -ForegroundColor Yellow
    }
    
    if ($errors.Count -gt 0 -and ($errors | Where-Object { $_ -like "*Base de donnees*" })) {
        Write-Host "  üîß V√©rifiez MySQL et ex√©cutez les scripts SQL de BD" -ForegroundColor Yellow
    }
    
    # Recommandations sp√©cifiques aux nouveaux tests
    if ($warnings -contains "Donn√©es de test centres incompl√®tes" -or $warnings -contains "Donn√©es de test concours incompl√®tes") {
        Write-Host "  üîß Ex√©cutez insert_test_data.sql pour charger les donn√©es de test" -ForegroundColor Yellow
    }
    
    if ($errors -contains "Syst√®me BCrypt d√©faillant" -or $warnings -contains "BCrypt partiellement fonctionnel") {
        Write-Host "  üîß V√©rifiez la configuration BCrypt dans le backend" -ForegroundColor Yellow
        Write-Host "     - Assurez-vous que les mots de passe sont correctement encod√©s" -ForegroundColor Yellow
        Write-Host "     - V√©rifiez la configuration de PasswordEncoder" -ForegroundColor Yellow
    }
    
    if ($warnings -contains "Configuration CORS incertaine") {
        Write-Host "  üîß V√©rifiez la configuration CORS dans les contr√¥leurs" -ForegroundColor Yellow
        Write-Host "     - Ajoutez @CrossOrigin(origins = 'http://localhost:3000')" -ForegroundColor Yellow
    }
    
    if ($warnings -contains "Endpoint notifications non impl√©ment√©" -or $warnings -contains "Endpoint logs non impl√©ment√©") {
        Write-Host "  üîß Impl√©mentez les endpoints manquants:" -ForegroundColor Yellow
        Write-Host "     - /api/notifications pour la gestion des notifications" -ForegroundColor Yellow
        Write-Host "     - /api/logs pour l'acc√®s aux logs d'actions" -ForegroundColor Yellow
        Write-Host "     - /api/statistiques pour les tableaux de bord" -ForegroundColor Yellow
    }
    
    if ($warnings -contains "Test int√©gration impossible - services non d√©marr√©s") {
        Write-Host "  üîß D√©marrez les deux services pour tester l'int√©gration compl√®te" -ForegroundColor Yellow
        Write-Host "     - Backend sur le port 8080" -ForegroundColor Yellow
        Write-Host "     - Frontend sur le port 3000" -ForegroundColor Yellow
    }
    
    if ($errors -contains "Test session utilisateur √©chou√©") {
        Write-Host "  üîß V√©rifiez la configuration des sessions:" -ForegroundColor Yellow
        Write-Host "     - Configuration HttpSession dans Spring Boot" -ForegroundColor Yellow
        Write-Host "     - Gestion des cookies c√¥t√© client" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "  üìä √âtat des tests avanc√©s:" -ForegroundColor White
    $dbTests = $successes | Where-Object { $_ -like "*donn√©es de test*" -or $_ -like "*BCrypt*" -or $_ -like "*Log_Action*" }
    if ($dbTests.Count -gt 0) {
        Write-Host "     ‚úì Tests base de donn√©es: OK ($($dbTests.Count) r√©ussis)" -ForegroundColor Green
    }
    else {
        Write-Host "     ‚úó Tests base de donn√©es: √Ä corriger" -ForegroundColor Red
    }
    
    $funcTests = $successes | Where-Object { $_ -like "*candidatures*" -or $_ -like "*notifications*" -or $_ -like "*logs*" }
    if ($funcTests.Count -gt 0) {
        Write-Host "     ‚úì Tests fonctionnels: OK ($($funcTests.Count) r√©ussis)" -ForegroundColor Green
    }
    else {
        Write-Host "     ‚ö† Tests fonctionnels: Partiels" -ForegroundColor Yellow
    }
    
    $commTests = $successes | Where-Object { $_ -like "*CORS*" -or $_ -like "*Frontend-Backend*" -or $_ -like "*session*" }
    if ($commTests.Count -gt 0) {
        Write-Host "     ‚úì Communication Frontend-Backend: OK ($($commTests.Count) r√©ussis)" -ForegroundColor Green
    }
    else {
        Write-Host "     ‚ö† Communication Frontend-Backend: √Ä v√©rifier" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "        FIN DU DIAGNOSTIC" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# Sauvegarder le rapport
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$reportPath = "diagnostic_report_$timestamp.txt"

# ========================================
# G√âN√âRATION DE SCRIPT DE CORRECTION SQL
# ========================================
if ($problemesPostes.Count -gt 0) {
    Write-Host ""
    Write-Host "üîß G√âN√âRATION DU SCRIPT DE CORRECTION..." -ForegroundColor Cyan
    
    $correctionSQL = @"
-- =========================================
-- SCRIPT DE CORRECTION AUTOMATIQUE
-- G√©n√©r√© le $(Get-Date)
-- Pour r√©soudre les probl√®mes de postes non visibles
-- =========================================

USE candidature_plus;

-- 1. Activer tous les concours
UPDATE Concours SET actif = true WHERE actif = false OR actif IS NULL;

-- 2. Mettre √† jour les dates des concours pour les rendre disponibles
UPDATE Concours SET 
    dateDebutCandidature = CURDATE(),
    dateFinCandidature = DATE_ADD(CURDATE(), INTERVAL 60 DAY)
WHERE actif = true;

-- 3. V√©rifier les donn√©es apr√®s correction
SELECT 'CONCOURS ACTIFS' as verification, COUNT(*) as nombre FROM Concours WHERE actif = true;
SELECT 'CONCOURS OUVERTS' as verification, COUNT(*) as nombre FROM Concours 
WHERE actif = true AND dateDebutCandidature <= CURDATE() AND dateFinCandidature >= CURDATE();
SELECT 'CENTRES' as verification, COUNT(*) as nombre FROM Centre;
SELECT 'SP√âCIALIT√âS' as verification, COUNT(*) as nombre FROM Specialite;

-- 4. Afficher les concours ouverts
SELECT 
    id,
    nom,
    dateDebutCandidature,
    dateFinCandidature,
    actif,
    DATEDIFF(dateFinCandidature, CURDATE()) as jours_restants
FROM Concours 
WHERE actif = true 
ORDER BY dateFinCandidature;

COMMIT;
"@

    $correctionPath = "correction_postes_$timestamp.sql"
    $correctionSQL | Out-File -FilePath $correctionPath -Encoding UTF8
    Write-Host "  ‚úì Script de correction g√©n√©r√©: $correctionPath" -ForegroundColor Green
    Write-Host ""
    Write-Host "  üìã Pour appliquer les corrections:" -ForegroundColor Yellow
    Write-Host "    mysql -u root -p < $correctionPath" -ForegroundColor Gray
}

# Sauvegarder le rapport d√©taill√©
$report = @"
RAPPORT DE DIAGNOSTIC COMPLET - $(Get-Date)
==============================================

TESTS EXECUTES:
1. V√©rification des processus (Java, Node.js)
2. V√©rification des ports (8080, 3000)
3. Test de connectivit√© backend
4. Test des endpoints API critiques
5. Test d'authentification
6. V√©rification de la base de donn√©es
7. Test de connectivit√© frontend
8. Test des nouvelles fonctionnalit√©s
9. Tests base de donn√©es approfondis
10. Tests fonctionnels avanc√©s
11. Tests communication Frontend-Backend

RESULTATS:
==========

SUCCES ($($successes.Count)):
$(($successes | ForEach-Object { "  ‚úì $_" }) -join "`n")

AVERTISSEMENTS ($($warnings.Count)):
$(($warnings | ForEach-Object { "  ‚ö† $_" }) -join "`n")

ERREURS ($($errors.Count)):
$(($errors | ForEach-Object { "  ‚úó $_" }) -join "`n")

ANALYSE DETAILLEE:
==================

Base de donn√©es:
- Tables syst√®me (Log_Action, Notification): $(if ($successes -like "*Log_Action*") { "OK" } else { "√Ä v√©rifier" })
- Donn√©es de test: $(if ($successes -like "*donn√©es de test*") { "Compl√®tes" } else { "Incompl√®tes" })
- Authentification BCrypt: $(if ($successes -like "*BCrypt*") { "Fonctionnelle" } else { "√Ä corriger" })

Fonctionnalit√©s avanc√©es:
- Gestion candidatures: $(if ($successes -like "*candidatures*") { "OK" } else { "Partielle" })
- Syst√®me notifications: $(if ($successes -like "*notifications*") { "OK" } elseif ($warnings -like "*notifications*") { "Non impl√©ment√©" } else { "√Ä v√©rifier" })
- Logs d'actions: $(if ($successes -like "*logs*") { "OK" } elseif ($warnings -like "*logs*") { "Non impl√©ment√©" } else { "√Ä v√©rifier" })

Communication Frontend-Backend:
- Configuration CORS: $(if ($successes -like "*CORS*") { "OK" } else { "√Ä v√©rifier" })
- APIs Frontend: $(if ($successes -like "*APIs frontend*") { "Fonctionnelles" } else { "Partielles" })
- Sessions utilisateur: $(if ($successes -like "*session*") { "OK" } else { "√Ä corriger" })
- Int√©gration compl√®te: $(if ($successes -like "*Int√©gration*") { "OK" } else { "Partielle" })

RECOMMANDATIONS:
================
$(if ($errors.Count -eq 0 -and $warnings.Count -eq 0) {
    "‚úì Application enti√®rement fonctionnelle
‚úì Tous les tests approfondis r√©ussis
‚úì Pr√™t pour la production"
} else {
    "Consulter les recommandations d√©taill√©es dans le diagnostic"
})
"@

$report | Out-File -FilePath $reportPath -Encoding UTF8
Write-Host "Rapport d√©taill√© sauvegard√© dans: $reportPath" -ForegroundColor Cyan
